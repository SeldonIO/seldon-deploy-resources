"apiVersion": |-
  argoproj.io/v1alpha1
"kind": |-
  Workflow
"metadata":
  "annotations":
    "pipelines.kubeflow.org/pipeline_spec": |-
      {"description": "Seldon e2e adult", "inputs": [{"default": "admin", "name": "DEPLOY_NAMESPACE", "optional": true}, {"default": "12341234", "name": "DEPLOY_PASSWORD", "optional": true}, {"default": "https://x.x.x.x/seldon-deploy/", "name": "DEPLOY_SERVER", "optional": true}, {"default": "admin@kubeflow.org", "name": "DEPLOY_USER", "optional": true}, {"default": "sklearn/income/explainer", "name": "EXPLAINER_MODEL_PATH", "optional": true}, {"default": "sklearn/income/model", "name": "INCOME_MODEL_PATH", "optional": true}, {"default": "minio", "name": "MINIO_ACCESS_KEY", "optional": true}, {"default": "minio-service.kubeflow:9000", "name": "MINIO_HOST", "optional": true}, {"default": "seldon", "name": "MINIO_MODEL_BUCKET", "optional": true}, {"default": "minio123", "name": "MINIO_SECRET_KEY", "optional": true}, {"default": "sklearn/income/outlier", "name": "OUTLIER_MODEL_PATH", "optional": true}], "name": "seldon-e2e-adult-xfdxg"}
  "generateName": |-
    seldon-e2e-adult-xfdxg-
"spec":
  "arguments":
    "parameters":
    - "name": |-
        DEPLOY_NAMESPACE
      "value": |-
        admin
    - "name": |-
        DEPLOY_PASSWORD
      "value": |-
        12341234
    - "name": |-
        DEPLOY_SERVER
      "value": |-
        https://x.x.x.x/seldon-deploy/
    - "name": |-
        DEPLOY_USER
      "value": |-
        admin@kubeflow.org
    - "name": |-
        EXPLAINER_MODEL_PATH
      "value": |-
        sklearn/income/explainer
    - "name": |-
        INCOME_MODEL_PATH
      "value": |-
        sklearn/income/model
    - "name": |-
        MINIO_ACCESS_KEY
      "value": |-
        minio
    - "name": |-
        MINIO_HOST
      "value": |-
        minio-service.kubeflow:9000
    - "name": |-
        MINIO_MODEL_BUCKET
      "value": |-
        seldon
    - "name": |-
        MINIO_SECRET_KEY
      "value": |-
        minio123
    - "name": |-
        OUTLIER_MODEL_PATH
      "value": |-
        sklearn/income/outlier
  "entrypoint": |-
    seldon-e2e-adult-xfdxg
  "serviceAccountName": |-
    pipeline-runner
  "templates":
  - "container":
      "args":
      - |-
        --DEPLOY-PASSWORD
      - |-
        {{inputs.parameters.DEPLOY_PASSWORD}}
      - |-
        --DEPLOY-SERVER
      - |-
        {{inputs.parameters.DEPLOY_SERVER}}
      - |-
        --DEPLOY-USER
      - |-
        {{inputs.parameters.DEPLOY_USER}}
      - |-
        --INCOME-MODEL-PATH
      - |-
        {{inputs.parameters.INCOME_MODEL_PATH}}
      - |-
        --MINIO-ACCESS-KEY
      - |-
        {{inputs.parameters.MINIO_ACCESS_KEY}}
      - |-
        --MINIO-HOST
      - |-
        {{inputs.parameters.MINIO_HOST}}
      - |-
        --MINIO-MODEL-BUCKET
      - |-
        {{inputs.parameters.MINIO_MODEL_BUCKET}}
      - |-
        --MINIO-SECRET-KEY
      - |-
        {{inputs.parameters.MINIO_SECRET_KEY}}
      "command":
      - |-
        python3
      - |-
        -u
      - |-
        -c
      - "def build_model(DEPLOY_PASSWORD , DEPLOY_SERVER , DEPLOY_USER , INCOME_MODEL_PATH\
        \ , MINIO_ACCESS_KEY , MINIO_HOST , MINIO_MODEL_BUCKET , MINIO_SECRET_KEY\
        \ ):\n    pipeline_parameters_block = '''\n    DEPLOY_PASSWORD = \"{}\"\n\
        \    DEPLOY_SERVER = \"{}\"\n    DEPLOY_USER = \"{}\"\n    INCOME_MODEL_PATH\
        \ = \"{}\"\n    MINIO_ACCESS_KEY = \"{}\"\n    MINIO_HOST = \"{}\"\n    MINIO_MODEL_BUCKET\
        \ = \"{}\"\n    MINIO_SECRET_KEY = \"{}\"\n    '''.format(DEPLOY_PASSWORD,\
        \ DEPLOY_SERVER, DEPLOY_USER, INCOME_MODEL_PATH, MINIO_ACCESS_KEY, MINIO_HOST,\
        \ MINIO_MODEL_BUCKET, MINIO_SECRET_KEY)\n\n    from kale.utils import mlmd_utils\
        \ as _kale_mlmd_utils\n    _kale_mlmd_utils.init_metadata()\n\n    block1\
        \ = '''\n    import numpy as np\n    from sklearn.ensemble import RandomForestClassifier\n\
        \    from sklearn.compose import ColumnTransformer\n    from sklearn.pipeline\
        \ import Pipeline\n    from sklearn.impute import SimpleImputer\n    from\
        \ sklearn.metrics import accuracy_score\n    from sklearn.preprocessing import\
        \ StandardScaler, OneHotEncoder\n    from alibi.explainers import AnchorTabular\n\
        \    from alibi.datasets import fetch_adult\n    from minio import Minio\n\
        \    from minio.error import ResponseError\n    from joblib import dump, load\n\
        \    import dill\n    import time\n    import json\n    from subprocess import\
        \ run, Popen, PIPE\n    from alibi_detect.utils.data import create_outlier_batch\n\
        \    import swagger_client\n    from swagger_client.rest import ApiException\n\
        \    import yaml\n    import json\n    import urllib3\n    urllib3.disable_warnings()\n\
        \    '''\n\n    block2 = '''\n    def get_minio():\n        return Minio(MINIO_HOST,\n\
        \                        access_key=MINIO_ACCESS_KEY,\n                  \
        \      secret_key=MINIO_SECRET_KEY,\n                        secure=False)\n\
        \    '''\n\n    block3 = '''\n    def get_swagger_configuration():\n     \
        \   configuration = swagger_client.Configuration()\n        configuration.host\
        \ = 'http://seldon-deploy.seldon-system/seldon-deploy/api/v1alpha1'\n    \
        \    return configuration\n    '''\n\n    block4 = '''\n    import requests\n\
        \n    from urllib.parse import urlparse\n\n    KF_SESSION_COOKIE_NAME = \"\
        authservice_session\"\n\n    class SessionAuthenticator:\n        \"\"\"\n\
        \        Returns the cookie token.\n        \"\"\"\n\n        def __init__(self,\
        \ server: str):\n            self._server = server\n\n            url = urlparse(server)\n\
        \            self._host = f\"{url.scheme}://{url.netloc}\"\n\n        def\
        \ authenticate(self, user: str, password: str) -> str:\n            auth_path\
        \ = self._get_auth_path()\n            success_path = self._submit_auth(auth_path,\
        \ user, password)\n            session_cookie = self._get_session_cookie(success_path)\n\
        \            return session_cookie\n\n        def _get_auth_path(self) ->\
        \ str:\n            # Send unauthenticated request\n            res = requests.get(self._server,\
        \ allow_redirects=False, verify=False)\n\n            # Follow the 302 redirect\n\
        \            oidc_path = res.headers[\"Location\"]\n            oidc_endpoint\
        \ = f\"{self._host}{oidc_path}\"\n            res = requests.get(oidc_endpoint,\
        \ allow_redirects=False, verify=False)\n\n            return res.headers[\"\
        Location\"]\n\n        def _submit_auth(self, auth_path: str, user: str, password:\
        \ str) -> str:\n            auth_endpoint = f\"{self._host}{auth_path}\"\n\
        \            auth_payload = {\"login\": user, \"password\": password}\n  \
        \          res = requests.post(auth_endpoint, auth_payload, allow_redirects=False,\
        \ verify=False)\n\n            login_path = res.headers[\"Location\"]\n  \
        \          login_endpoint = f\"{self._host}{login_path}\"\n            res\
        \ = requests.get(login_endpoint, allow_redirects=False, verify=False)\n\n\
        \            return res.headers[\"Location\"]\n\n        def _get_session_cookie(self,\
        \ success_path: str) -> str:\n            success_endpoint = f\"{self._host}{success_path}\"\
        \n            res = requests.get(success_endpoint, allow_redirects=False,\
        \ verify=False)\n            print(res.cookies)\n            return res.cookies[KF_SESSION_COOKIE_NAME]\n\
        \n    def authenticate():\n        authenticator = SessionAuthenticator(DEPLOY_SERVER)\n\
        \n        cookie = authenticator.authenticate(DEPLOY_USER, DEPLOY_PASSWORD)\n\
        \        return cookie\n    '''\n\n    block5 = '''\n    adult = fetch_adult()\n\
        \    adult.keys()\n    '''\n\n    block6 = '''\n    data = adult.data\n  \
        \  target = adult.target\n    feature_names = adult.feature_names\n    category_map\
        \ = adult.category_map\n    '''\n\n    block7 = '''\n    from alibi.utils.data\
        \ import gen_category_map\n    '''\n\n    block8 = '''\n    np.random.seed(0)\n\
        \    data_perm = np.random.permutation(np.c_[data, target])\n    data = data_perm[:,:-1]\n\
        \    target = data_perm[:,-1]\n    '''\n\n    block9 = '''\n    idx = 30000\n\
        \    X_train,Y_train = data[:idx,:], target[:idx]\n    X_test, Y_test = data[idx+1:,:],\
        \ target[idx+1:]\n    '''\n\n    block10 = '''\n    ordinal_features = [x\
        \ for x in range(len(feature_names)) if x not in list(category_map.keys())]\n\
        \    ordinal_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='median')),\n\
        \                                          ('scaler', StandardScaler())])\n\
        \    '''\n\n    block11 = '''\n    categorical_features = list(category_map.keys())\n\
        \    categorical_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='median')),\n\
        \                                              ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\
        \    '''\n\n    block12 = '''\n    preprocessor = ColumnTransformer(transformers=[('num',\
        \ ordinal_transformer, ordinal_features),\n                              \
        \                     ('cat', categorical_transformer, categorical_features)])\n\
        \    '''\n\n    block13 = '''\n    np.random.seed(0)\n    clf = RandomForestClassifier(n_estimators=50)\n\
        \    '''\n\n    block14 = '''\n    model=Pipeline(steps=[(\"preprocess\",preprocessor),(\"\
        model\",clf)])\n    model.fit(X_train,Y_train)\n    '''\n\n    block15 = '''\n\
        \    def predict_fn(x):\n        return model.predict(x)\n    '''\n\n    block16\
        \ = '''\n    #predict_fn = lambda x: clf.predict(preprocessor.transform(x))\n\
        \    print('Train accuracy: ', accuracy_score(Y_train, predict_fn(X_train)))\n\
        \    print('Test accuracy: ', accuracy_score(Y_test, predict_fn(X_test)))\n\
        \    '''\n\n    block17 = '''\n    dump(model, 'model.joblib') \n    '''\n\
        \n    block18 = '''\n    print(get_minio().fput_object(MINIO_MODEL_BUCKET,\
        \ f\"{INCOME_MODEL_PATH}/model.joblib\", 'model.joblib'))\n    '''\n\n   \
        \ data_saving_block = '''\n    # -----------------------DATA SAVING START---------------------------------\n\
        \    from kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"\
        /marshal\")\n    _kale_marshal_utils.save(X_test, \"X_test\")\n    _kale_marshal_utils.save(X_train,\
        \ \"X_train\")\n    _kale_marshal_utils.save(Y_train, \"Y_train\")\n    _kale_marshal_utils.save(adult,\
        \ \"adult\")\n    _kale_marshal_utils.save(category_map, \"category_map\"\
        )\n    _kale_marshal_utils.save(feature_names, \"feature_names\")\n    _kale_marshal_utils.save(model,\
        \ \"model\")\n    _kale_marshal_utils.save(predict_fn, \"predict_fn\")\n \
        \   # -----------------------DATA SAVING END-----------------------------------\n\
        \    '''\n\n    # run the code blocks inside a jupyter kernel\n    from kale.utils.jupyter_utils\
        \ import run_code as _kale_run_code\n    from kale.utils.kfp_utils import\\\
        \n        update_uimetadata as _kale_update_uimetadata\n    blocks = (pipeline_parameters_block,\n\
        \              block1,\n              block2,\n              block3,\n   \
        \           block4,\n              block5,\n              block6,\n      \
        \        block7,\n              block8,\n              block9,\n         \
        \     block10,\n              block11,\n              block12,\n         \
        \     block13,\n              block14,\n              block15,\n         \
        \     block16,\n              block17,\n              block18,\n         \
        \     data_saving_block)\n    html_artifact = _kale_run_code(blocks)\n   \
        \ with open(\"/build_model.html\", \"w\") as f:\n        f.write(html_artifact)\n\
        \    _kale_update_uimetadata('build_model')\n\n    _kale_mlmd_utils.call(\"\
        mark_execution_complete\")\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Build\
        \ model', description='')\n_parser.add_argument(\"--DEPLOY-PASSWORD\", dest=\"\
        DEPLOY_PASSWORD\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
        --DEPLOY-SERVER\", dest=\"DEPLOY_SERVER\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--DEPLOY-USER\", dest=\"DEPLOY_USER\", type=str, required=True,\
        \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--INCOME-MODEL-PATH\"\
        , dest=\"INCOME_MODEL_PATH\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--MINIO-ACCESS-KEY\", dest=\"MINIO_ACCESS_KEY\", type=str,\
        \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--MINIO-HOST\"\
        , dest=\"MINIO_HOST\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--MINIO-MODEL-BUCKET\", dest=\"MINIO_MODEL_BUCKET\"\
        , type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
        --MINIO-SECRET-KEY\", dest=\"MINIO_SECRET_KEY\", type=str, required=True,\
        \ default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\
        _output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = build_model(**_parsed_args)\n\
        \n_output_serializers = [\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
        \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
        \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
      "image": |-
        seldonio/jupyter-lab-alibi-kale:0.23
      "securityContext":
        "runAsUser": !!int |-
          0
      "volumeMounts":
      - "mountPath": |-
          /marshal
        "name": |-
          kale-marshal-volume
      "workingDir": |-
        /home/jovyan
    "inputs":
      "parameters":
      - "name": |-
          DEPLOY_PASSWORD
      - "name": |-
          DEPLOY_SERVER
      - "name": |-
          DEPLOY_USER
      - "name": |-
          INCOME_MODEL_PATH
      - "name": |-
          MINIO_ACCESS_KEY
      - "name": |-
          MINIO_HOST
      - "name": |-
          MINIO_MODEL_BUCKET
      - "name": |-
          MINIO_SECRET_KEY
      - "name": |-
          kale-marshal-volume-name
    "metadata":
      "annotations":
        "kubeflow-kale.org/dependent-templates": |-
          ["Setup", "kale-marshal-volume"]
        "kubeflow-kale.org/volume-name-parameters": |-
          ["kale-marshal-volume-name"]
        "pipelines.kubeflow.org/component_spec": |-
          {"inputs": [{"name": "DEPLOY_PASSWORD", "type": "String"}, {"name": "DEPLOY_SERVER", "type": "String"}, {"name": "DEPLOY_USER", "type": "String"}, {"name": "INCOME_MODEL_PATH", "type": "String"}, {"name": "MINIO_ACCESS_KEY", "type": "String"}, {"name": "MINIO_HOST", "type": "String"}, {"name": "MINIO_MODEL_BUCKET", "type": "String"}, {"name": "MINIO_SECRET_KEY", "type": "String"}], "name": "Build model"}
      "labels":
        "pipelines.kubeflow.org/metadata_written": |-
          true
    "name": |-
      build-model
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          build_model
        "path": |-
          /build_model.html
    "volumes":
    - "name": |-
        kale-marshal-volume
      "persistentVolumeClaim":
        "claimName": |-
          {{inputs.parameters.kale-marshal-volume-name}}
  - "container":
      "args":
      - |-
        --DEPLOY-PASSWORD
      - |-
        {{inputs.parameters.DEPLOY_PASSWORD}}
      - |-
        --DEPLOY-SERVER
      - |-
        {{inputs.parameters.DEPLOY_SERVER}}
      - |-
        --DEPLOY-USER
      - |-
        {{inputs.parameters.DEPLOY_USER}}
      - |-
        --MINIO-ACCESS-KEY
      - |-
        {{inputs.parameters.MINIO_ACCESS_KEY}}
      - |-
        --MINIO-HOST
      - |-
        {{inputs.parameters.MINIO_HOST}}
      - |-
        --MINIO-MODEL-BUCKET
      - |-
        {{inputs.parameters.MINIO_MODEL_BUCKET}}
      - |-
        --MINIO-SECRET-KEY
      - |-
        {{inputs.parameters.MINIO_SECRET_KEY}}
      - |-
        --OUTLIER-MODEL-PATH
      - |-
        {{inputs.parameters.OUTLIER_MODEL_PATH}}
      "command":
      - |-
        python3
      - |-
        -u
      - |-
        -c
      - "def build_outlier(DEPLOY_PASSWORD , DEPLOY_SERVER , DEPLOY_USER , MINIO_ACCESS_KEY\
        \ , MINIO_HOST , MINIO_MODEL_BUCKET , MINIO_SECRET_KEY , OUTLIER_MODEL_PATH\
        \ ):\n    pipeline_parameters_block = '''\n    DEPLOY_PASSWORD = \"{}\"\n\
        \    DEPLOY_SERVER = \"{}\"\n    DEPLOY_USER = \"{}\"\n    MINIO_ACCESS_KEY\
        \ = \"{}\"\n    MINIO_HOST = \"{}\"\n    MINIO_MODEL_BUCKET = \"{}\"\n   \
        \ MINIO_SECRET_KEY = \"{}\"\n    OUTLIER_MODEL_PATH = \"{}\"\n    '''.format(DEPLOY_PASSWORD,\
        \ DEPLOY_SERVER, DEPLOY_USER, MINIO_ACCESS_KEY, MINIO_HOST, MINIO_MODEL_BUCKET,\
        \ MINIO_SECRET_KEY, OUTLIER_MODEL_PATH)\n\n    from kale.utils import mlmd_utils\
        \ as _kale_mlmd_utils\n    _kale_mlmd_utils.init_metadata()\n\n    data_loading_block\
        \ = '''\n    # -----------------------DATA LOADING START--------------------------------\n\
        \    from kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"\
        /marshal\")\n    _kale_marshal_utils.set_kale_directory_file_names()\n   \
        \ X_train = _kale_marshal_utils.load(\"X_train\")\n    Y_train = _kale_marshal_utils.load(\"\
        Y_train\")\n    # -----------------------DATA LOADING END----------------------------------\n\
        \    '''\n\n    block1 = '''\n    import numpy as np\n    from sklearn.ensemble\
        \ import RandomForestClassifier\n    from sklearn.compose import ColumnTransformer\n\
        \    from sklearn.pipeline import Pipeline\n    from sklearn.impute import\
        \ SimpleImputer\n    from sklearn.metrics import accuracy_score\n    from\
        \ sklearn.preprocessing import StandardScaler, OneHotEncoder\n    from alibi.explainers\
        \ import AnchorTabular\n    from alibi.datasets import fetch_adult\n    from\
        \ minio import Minio\n    from minio.error import ResponseError\n    from\
        \ joblib import dump, load\n    import dill\n    import time\n    import json\n\
        \    from subprocess import run, Popen, PIPE\n    from alibi_detect.utils.data\
        \ import create_outlier_batch\n    import swagger_client\n    from swagger_client.rest\
        \ import ApiException\n    import yaml\n    import json\n    import urllib3\n\
        \    urllib3.disable_warnings()\n    '''\n\n    block2 = '''\n    def get_minio():\n\
        \        return Minio(MINIO_HOST,\n                        access_key=MINIO_ACCESS_KEY,\n\
        \                        secret_key=MINIO_SECRET_KEY,\n                  \
        \      secure=False)\n    '''\n\n    block3 = '''\n    def get_swagger_configuration():\n\
        \        configuration = swagger_client.Configuration()\n        configuration.host\
        \ = 'http://seldon-deploy.seldon-system/seldon-deploy/api/v1alpha1'\n    \
        \    return configuration\n    '''\n\n    block4 = '''\n    import requests\n\
        \n    from urllib.parse import urlparse\n\n    KF_SESSION_COOKIE_NAME = \"\
        authservice_session\"\n\n    class SessionAuthenticator:\n        \"\"\"\n\
        \        Returns the cookie token.\n        \"\"\"\n\n        def __init__(self,\
        \ server: str):\n            self._server = server\n\n            url = urlparse(server)\n\
        \            self._host = f\"{url.scheme}://{url.netloc}\"\n\n        def\
        \ authenticate(self, user: str, password: str) -> str:\n            auth_path\
        \ = self._get_auth_path()\n            success_path = self._submit_auth(auth_path,\
        \ user, password)\n            session_cookie = self._get_session_cookie(success_path)\n\
        \            return session_cookie\n\n        def _get_auth_path(self) ->\
        \ str:\n            # Send unauthenticated request\n            res = requests.get(self._server,\
        \ allow_redirects=False, verify=False)\n\n            # Follow the 302 redirect\n\
        \            oidc_path = res.headers[\"Location\"]\n            oidc_endpoint\
        \ = f\"{self._host}{oidc_path}\"\n            res = requests.get(oidc_endpoint,\
        \ allow_redirects=False, verify=False)\n\n            return res.headers[\"\
        Location\"]\n\n        def _submit_auth(self, auth_path: str, user: str, password:\
        \ str) -> str:\n            auth_endpoint = f\"{self._host}{auth_path}\"\n\
        \            auth_payload = {\"login\": user, \"password\": password}\n  \
        \          res = requests.post(auth_endpoint, auth_payload, allow_redirects=False,\
        \ verify=False)\n\n            login_path = res.headers[\"Location\"]\n  \
        \          login_endpoint = f\"{self._host}{login_path}\"\n            res\
        \ = requests.get(login_endpoint, allow_redirects=False, verify=False)\n\n\
        \            return res.headers[\"Location\"]\n\n        def _get_session_cookie(self,\
        \ success_path: str) -> str:\n            success_endpoint = f\"{self._host}{success_path}\"\
        \n            res = requests.get(success_endpoint, allow_redirects=False,\
        \ verify=False)\n            print(res.cookies)\n            return res.cookies[KF_SESSION_COOKIE_NAME]\n\
        \n    def authenticate():\n        authenticator = SessionAuthenticator(DEPLOY_SERVER)\n\
        \n        cookie = authenticator.authenticate(DEPLOY_USER, DEPLOY_PASSWORD)\n\
        \        return cookie\n    '''\n\n    block5 = '''\n    from alibi_detect.od\
        \ import IForest\n\n    od = IForest(\n        threshold=0.,\n        n_estimators=200,\n\
        \    )\n    '''\n\n    block6 = '''\n    od.fit(X_train)\n    '''\n\n    block7\
        \ = '''\n    np.random.seed(0)\n    perc_outlier = 5\n    threshold_batch\
        \ = create_outlier_batch(X_train, Y_train, n_samples=1000, perc_outlier=perc_outlier)\n\
        \    X_threshold, y_threshold = threshold_batch.data.astype('float'), threshold_batch.target\n\
        \    #X_threshold = (X_threshold - mean) / stdev\n    print('{}% outliers'.format(100\
        \ * y_threshold.mean()))\n    '''\n\n    block8 = '''\n    od.infer_threshold(X_threshold,\
        \ threshold_perc=100-perc_outlier)\n    print('New threshold: {}'.format(od.threshold))\n\
        \    threshold = od.threshold\n    '''\n\n    block9 = '''\n    X_outlier\
        \ = [[300,  4,  4,  2,  1,  4,  4,  0,  0,  0, 600,  9]]\n    '''\n\n    block10\
        \ = '''\n    od.predict(\n        X_outlier\n    )\n    '''\n\n    block11\
        \ = '''\n    from alibi_detect.utils.saving import save_detector, load_detector\n\
        \    from os import listdir\n    from os.path import isfile, join\n\n    filepath=\"\
        ifoutlier\"\n    save_detector(od, filepath) \n    onlyfiles = [f for f in\
        \ listdir(filepath) if isfile(join(filepath, f))]\n    for filename in onlyfiles:\n\
        \        print(filename)\n        print(get_minio().fput_object(MINIO_MODEL_BUCKET,\
        \ f\"{OUTLIER_MODEL_PATH}/{filename}\", join(filepath, filename)))\n    '''\n\
        \n    block12 = '''\n    run(\"kubectl label namespace admin istio-injection=disabled\
        \ --overwrite\", shell=True)\n    '''\n\n    # run the code blocks inside\
        \ a jupyter kernel\n    from kale.utils.jupyter_utils import run_code as _kale_run_code\n\
        \    from kale.utils.kfp_utils import\\\n        update_uimetadata as _kale_update_uimetadata\n\
        \    blocks = (pipeline_parameters_block, data_loading_block,\n          \
        \    block1,\n              block2,\n              block3,\n             \
        \ block4,\n              block5,\n              block6,\n              block7,\n\
        \              block8,\n              block9,\n              block10,\n  \
        \            block11,\n              block12,\n              )\n    html_artifact\
        \ = _kale_run_code(blocks)\n    with open(\"/build_outlier.html\", \"w\")\
        \ as f:\n        f.write(html_artifact)\n    _kale_update_uimetadata('build_outlier')\n\
        \n    _kale_mlmd_utils.call(\"mark_execution_complete\")\n\nimport argparse\n\
        _parser = argparse.ArgumentParser(prog='Build outlier', description='')\n\
        _parser.add_argument(\"--DEPLOY-PASSWORD\", dest=\"DEPLOY_PASSWORD\", type=str,\
        \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--DEPLOY-SERVER\"\
        , dest=\"DEPLOY_SERVER\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--DEPLOY-USER\", dest=\"DEPLOY_USER\", type=str, required=True,\
        \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--MINIO-ACCESS-KEY\"\
        , dest=\"MINIO_ACCESS_KEY\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--MINIO-HOST\", dest=\"MINIO_HOST\", type=str, required=True,\
        \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--MINIO-MODEL-BUCKET\"\
        , dest=\"MINIO_MODEL_BUCKET\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--MINIO-SECRET-KEY\", dest=\"MINIO_SECRET_KEY\", type=str,\
        \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--OUTLIER-MODEL-PATH\"\
        , dest=\"OUTLIER_MODEL_PATH\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"\
        _output_paths\", [])\n\n_outputs = build_outlier(**_parsed_args)\n\n_output_serializers\
        \ = [\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
        \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
        \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
      "image": |-
        seldonio/jupyter-lab-alibi-kale:0.23
      "securityContext":
        "runAsUser": !!int |-
          0
      "volumeMounts":
      - "mountPath": |-
          /marshal
        "name": |-
          kale-marshal-volume
      "workingDir": |-
        /home/jovyan
    "inputs":
      "parameters":
      - "name": |-
          DEPLOY_PASSWORD
      - "name": |-
          DEPLOY_SERVER
      - "name": |-
          DEPLOY_USER
      - "name": |-
          MINIO_ACCESS_KEY
      - "name": |-
          MINIO_HOST
      - "name": |-
          MINIO_MODEL_BUCKET
      - "name": |-
          MINIO_SECRET_KEY
      - "name": |-
          OUTLIER_MODEL_PATH
      - "name": |-
          kale-marshal-volume-name
    "metadata":
      "annotations":
        "kubeflow-kale.org/dependent-templates": |-
          ["Build model", "kale-marshal-volume"]
        "kubeflow-kale.org/volume-name-parameters": |-
          ["kale-marshal-volume-name"]
        "pipelines.kubeflow.org/component_spec": |-
          {"inputs": [{"name": "DEPLOY_PASSWORD", "type": "String"}, {"name": "DEPLOY_SERVER", "type": "String"}, {"name": "DEPLOY_USER", "type": "String"}, {"name": "MINIO_ACCESS_KEY", "type": "String"}, {"name": "MINIO_HOST", "type": "String"}, {"name": "MINIO_MODEL_BUCKET", "type": "String"}, {"name": "MINIO_SECRET_KEY", "type": "String"}, {"name": "OUTLIER_MODEL_PATH", "type": "String"}], "name": "Build outlier"}
      "labels":
        "pipelines.kubeflow.org/metadata_written": |-
          true
    "name": |-
      build-outlier
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          build_outlier
        "path": |-
          /build_outlier.html
    "volumes":
    - "name": |-
        kale-marshal-volume
      "persistentVolumeClaim":
        "claimName": |-
          {{inputs.parameters.kale-marshal-volume-name}}
  - "container":
      "args":
      - |-
        --DEPLOY-NAMESPACE
      - |-
        {{inputs.parameters.DEPLOY_NAMESPACE}}
      - |-
        --DEPLOY-PASSWORD
      - |-
        {{inputs.parameters.DEPLOY_PASSWORD}}
      - |-
        --DEPLOY-SERVER
      - |-
        {{inputs.parameters.DEPLOY_SERVER}}
      - |-
        --DEPLOY-USER
      - |-
        {{inputs.parameters.DEPLOY_USER}}
      - |-
        --MINIO-ACCESS-KEY
      - |-
        {{inputs.parameters.MINIO_ACCESS_KEY}}
      - |-
        --MINIO-HOST
      - |-
        {{inputs.parameters.MINIO_HOST}}
      - |-
        --MINIO-SECRET-KEY
      - |-
        {{inputs.parameters.MINIO_SECRET_KEY}}
      "command":
      - |-
        python3
      - |-
        -u
      - |-
        -c
      - |
        def deploy_event_display(DEPLOY_NAMESPACE , DEPLOY_PASSWORD , DEPLOY_SERVER , DEPLOY_USER , MINIO_ACCESS_KEY , MINIO_HOST , MINIO_SECRET_KEY ):
            pipeline_parameters_block = '''
            DEPLOY_NAMESPACE = "{}"
            DEPLOY_PASSWORD = "{}"
            DEPLOY_SERVER = "{}"
            DEPLOY_USER = "{}"
            MINIO_ACCESS_KEY = "{}"
            MINIO_HOST = "{}"
            MINIO_SECRET_KEY = "{}"
            '''.format(DEPLOY_NAMESPACE, DEPLOY_PASSWORD, DEPLOY_SERVER, DEPLOY_USER, MINIO_ACCESS_KEY, MINIO_HOST, MINIO_SECRET_KEY)

            from kale.utils import mlmd_utils as _kale_mlmd_utils
            _kale_mlmd_utils.init_metadata()

            block1 = '''
            import numpy as np
            from sklearn.ensemble import RandomForestClassifier
            from sklearn.compose import ColumnTransformer
            from sklearn.pipeline import Pipeline
            from sklearn.impute import SimpleImputer
            from sklearn.metrics import accuracy_score
            from sklearn.preprocessing import StandardScaler, OneHotEncoder
            from alibi.explainers import AnchorTabular
            from alibi.datasets import fetch_adult
            from minio import Minio
            from minio.error import ResponseError
            from joblib import dump, load
            import dill
            import time
            import json
            from subprocess import run, Popen, PIPE
            from alibi_detect.utils.data import create_outlier_batch
            import swagger_client
            from swagger_client.rest import ApiException
            import yaml
            import json
            import urllib3
            urllib3.disable_warnings()
            '''

            block2 = '''
            def get_minio():
                return Minio(MINIO_HOST,
                                access_key=MINIO_ACCESS_KEY,
                                secret_key=MINIO_SECRET_KEY,
                                secure=False)
            '''

            block3 = '''
            def get_swagger_configuration():
                configuration = swagger_client.Configuration()
                configuration.host = 'http://seldon-deploy.seldon-system/seldon-deploy/api/v1alpha1'
                return configuration
            '''

            block4 = '''
            import requests

            from urllib.parse import urlparse

            KF_SESSION_COOKIE_NAME = "authservice_session"

            class SessionAuthenticator:
                """
                Returns the cookie token.
                """

                def __init__(self, server: str):
                    self._server = server

                    url = urlparse(server)
                    self._host = f"{url.scheme}://{url.netloc}"

                def authenticate(self, user: str, password: str) -> str:
                    auth_path = self._get_auth_path()
                    success_path = self._submit_auth(auth_path, user, password)
                    session_cookie = self._get_session_cookie(success_path)
                    return session_cookie

                def _get_auth_path(self) -> str:
                    # Send unauthenticated request
                    res = requests.get(self._server, allow_redirects=False, verify=False)

                    # Follow the 302 redirect
                    oidc_path = res.headers["Location"]
                    oidc_endpoint = f"{self._host}{oidc_path}"
                    res = requests.get(oidc_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _submit_auth(self, auth_path: str, user: str, password: str) -> str:
                    auth_endpoint = f"{self._host}{auth_path}"
                    auth_payload = {"login": user, "password": password}
                    res = requests.post(auth_endpoint, auth_payload, allow_redirects=False, verify=False)

                    login_path = res.headers["Location"]
                    login_endpoint = f"{self._host}{login_path}"
                    res = requests.get(login_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _get_session_cookie(self, success_path: str) -> str:
                    success_endpoint = f"{self._host}{success_path}"
                    res = requests.get(success_endpoint, allow_redirects=False, verify=False)
                    print(res.cookies)
                    return res.cookies[KF_SESSION_COOKIE_NAME]

            def authenticate():
                authenticator = SessionAuthenticator(DEPLOY_SERVER)

                cookie = authenticator.authenticate(DEPLOY_USER, DEPLOY_PASSWORD)
                return cookie
            '''

            block5 = '''
            event_display=f"""apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: hello-display
              namespace: {DEPLOY_NAMESPACE}
            spec:
              replicas: 1
              selector:
                matchLabels: &labels
                  app: hello-display
              template:
                metadata:
                  labels: *labels
                spec:
                  containers:
                    - name: event-display
                      image: gcr.io/knative-releases/knative.dev/eventing-contrib/cmd/event_display

            ---

            kind: Service
            apiVersion: v1
            metadata:
              name: hello-display
              namespace: {DEPLOY_NAMESPACE}
            spec:
              selector:
                app: hello-display
              ports:
              - protocol: TCP
                port: 80
                targetPort: 8080
            """
            with open("event_display.yaml","w") as f:
                f.write(event_display)
            run("kubectl apply -f event_display.yaml", shell=True)
            '''

            block6 = '''
            run(f"kubectl rollout status -n {DEPLOY_NAMESPACE} deploy/hello-display -n {DEPLOY_NAMESPACE}", shell=True)
            '''

            # run the code blocks inside a jupyter kernel
            from kale.utils.jupyter_utils import run_code as _kale_run_code
            from kale.utils.kfp_utils import\
                update_uimetadata as _kale_update_uimetadata
            blocks = (pipeline_parameters_block,
                      block1,
                      block2,
                      block3,
                      block4,
                      block5,
                      block6,
                      )
            html_artifact = _kale_run_code(blocks)
            with open("/deploy_event_display.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('deploy_event_display')

            _kale_mlmd_utils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Deploy event display', description='')
        _parser.add_argument("--DEPLOY-NAMESPACE", dest="DEPLOY_NAMESPACE", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-PASSWORD", dest="DEPLOY_PASSWORD", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-SERVER", dest="DEPLOY_SERVER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-USER", dest="DEPLOY_USER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-ACCESS-KEY", dest="MINIO_ACCESS_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-HOST", dest="MINIO_HOST", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-SECRET-KEY", dest="MINIO_SECRET_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = deploy_event_display(**_parsed_args)

        _output_serializers = [

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      "image": |-
        seldonio/jupyter-lab-alibi-kale:0.23
      "securityContext":
        "runAsUser": !!int |-
          0
      "volumeMounts":
      - "mountPath": |-
          /marshal
        "name": |-
          kale-marshal-volume
      "workingDir": |-
        /home/jovyan
    "inputs":
      "parameters":
      - "name": |-
          DEPLOY_NAMESPACE
      - "name": |-
          DEPLOY_PASSWORD
      - "name": |-
          DEPLOY_SERVER
      - "name": |-
          DEPLOY_USER
      - "name": |-
          MINIO_ACCESS_KEY
      - "name": |-
          MINIO_HOST
      - "name": |-
          MINIO_SECRET_KEY
      - "name": |-
          kale-marshal-volume-name
    "metadata":
      "annotations":
        "kubeflow-kale.org/dependent-templates": |-
          ["Deploy outlier", "kale-marshal-volume"]
        "kubeflow-kale.org/volume-name-parameters": |-
          ["kale-marshal-volume-name"]
        "pipelines.kubeflow.org/component_spec": |-
          {"inputs": [{"name": "DEPLOY_NAMESPACE", "type": "String"}, {"name": "DEPLOY_PASSWORD", "type": "String"}, {"name": "DEPLOY_SERVER", "type": "String"}, {"name": "DEPLOY_USER", "type": "String"}, {"name": "MINIO_ACCESS_KEY", "type": "String"}, {"name": "MINIO_HOST", "type": "String"}, {"name": "MINIO_SECRET_KEY", "type": "String"}], "name": "Deploy event display"}
      "labels":
        "pipelines.kubeflow.org/metadata_written": |-
          true
    "name": |-
      deploy-event-display
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          deploy_event_display
        "path": |-
          /deploy_event_display.html
    "volumes":
    - "name": |-
        kale-marshal-volume
      "persistentVolumeClaim":
        "claimName": |-
          {{inputs.parameters.kale-marshal-volume-name}}
  - "container":
      "args":
      - |-
        --DEPLOY-PASSWORD
      - |-
        {{inputs.parameters.DEPLOY_PASSWORD}}
      - |-
        --DEPLOY-SERVER
      - |-
        {{inputs.parameters.DEPLOY_SERVER}}
      - |-
        --DEPLOY-USER
      - |-
        {{inputs.parameters.DEPLOY_USER}}
      - |-
        --MINIO-ACCESS-KEY
      - |-
        {{inputs.parameters.MINIO_ACCESS_KEY}}
      - |-
        --MINIO-HOST
      - |-
        {{inputs.parameters.MINIO_HOST}}
      - |-
        --MINIO-SECRET-KEY
      - |-
        {{inputs.parameters.MINIO_SECRET_KEY}}
      "command":
      - |-
        python3
      - |-
        -u
      - |-
        -c
      - |
        def deploy_outlier(DEPLOY_PASSWORD , DEPLOY_SERVER , DEPLOY_USER , MINIO_ACCESS_KEY , MINIO_HOST , MINIO_SECRET_KEY ):
            pipeline_parameters_block = '''
            DEPLOY_PASSWORD = "{}"
            DEPLOY_SERVER = "{}"
            DEPLOY_USER = "{}"
            MINIO_ACCESS_KEY = "{}"
            MINIO_HOST = "{}"
            MINIO_SECRET_KEY = "{}"
            '''.format(DEPLOY_PASSWORD, DEPLOY_SERVER, DEPLOY_USER, MINIO_ACCESS_KEY, MINIO_HOST, MINIO_SECRET_KEY)

            from kale.utils import mlmd_utils as _kale_mlmd_utils
            _kale_mlmd_utils.init_metadata()

            data_loading_block = '''
            # -----------------------DATA LOADING START--------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/marshal")
            _kale_marshal_utils.set_kale_directory_file_names()
            model_name = _kale_marshal_utils.load("model_name")
            namespace = _kale_marshal_utils.load("namespace")
            # -----------------------DATA LOADING END----------------------------------
            '''

            block1 = '''
            import numpy as np
            from sklearn.ensemble import RandomForestClassifier
            from sklearn.compose import ColumnTransformer
            from sklearn.pipeline import Pipeline
            from sklearn.impute import SimpleImputer
            from sklearn.metrics import accuracy_score
            from sklearn.preprocessing import StandardScaler, OneHotEncoder
            from alibi.explainers import AnchorTabular
            from alibi.datasets import fetch_adult
            from minio import Minio
            from minio.error import ResponseError
            from joblib import dump, load
            import dill
            import time
            import json
            from subprocess import run, Popen, PIPE
            from alibi_detect.utils.data import create_outlier_batch
            import swagger_client
            from swagger_client.rest import ApiException
            import yaml
            import json
            import urllib3
            urllib3.disable_warnings()
            '''

            block2 = '''
            def get_minio():
                return Minio(MINIO_HOST,
                                access_key=MINIO_ACCESS_KEY,
                                secret_key=MINIO_SECRET_KEY,
                                secure=False)
            '''

            block3 = '''
            def get_swagger_configuration():
                configuration = swagger_client.Configuration()
                configuration.host = 'http://seldon-deploy.seldon-system/seldon-deploy/api/v1alpha1'
                return configuration
            '''

            block4 = '''
            import requests

            from urllib.parse import urlparse

            KF_SESSION_COOKIE_NAME = "authservice_session"

            class SessionAuthenticator:
                """
                Returns the cookie token.
                """

                def __init__(self, server: str):
                    self._server = server

                    url = urlparse(server)
                    self._host = f"{url.scheme}://{url.netloc}"

                def authenticate(self, user: str, password: str) -> str:
                    auth_path = self._get_auth_path()
                    success_path = self._submit_auth(auth_path, user, password)
                    session_cookie = self._get_session_cookie(success_path)
                    return session_cookie

                def _get_auth_path(self) -> str:
                    # Send unauthenticated request
                    res = requests.get(self._server, allow_redirects=False, verify=False)

                    # Follow the 302 redirect
                    oidc_path = res.headers["Location"]
                    oidc_endpoint = f"{self._host}{oidc_path}"
                    res = requests.get(oidc_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _submit_auth(self, auth_path: str, user: str, password: str) -> str:
                    auth_endpoint = f"{self._host}{auth_path}"
                    auth_payload = {"login": user, "password": password}
                    res = requests.post(auth_endpoint, auth_payload, allow_redirects=False, verify=False)

                    login_path = res.headers["Location"]
                    login_endpoint = f"{self._host}{login_path}"
                    res = requests.get(login_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _get_session_cookie(self, success_path: str) -> str:
                    success_endpoint = f"{self._host}{success_path}"
                    res = requests.get(success_endpoint, allow_redirects=False, verify=False)
                    print(res.cookies)
                    return res.cookies[KF_SESSION_COOKIE_NAME]

            def authenticate():
                authenticator = SessionAuthenticator(DEPLOY_SERVER)

                cookie = authenticator.authenticate(DEPLOY_USER, DEPLOY_PASSWORD)
                return cookie
            '''

            block5 = '''
            configuration = get_swagger_configuration()
            outlier = swagger_client.OutlierDetectorApi(swagger_client.ApiClient(configuration))
            outlier_params = {
            "params": {
                "event_source": "io.seldon.serving.incomeod",
                "event_type": "io.seldon.serving.inference.outlier",
                "http_port": "8080",
                "model_name": "adultod",
                "protocol": "seldon.http",
                "reply_url": "http://hello-display."+namespace,
                "storage_uri": "s3://seldon/sklearn/income/outlier",
                "env_secret_ref": "seldon-init-container-secret"
              }
            }
            res = outlier.create_outlier_detector_seldon_deployment(model_name, namespace, outlier_detector=outlier_params)
            '''

            data_saving_block = '''
            # -----------------------DATA SAVING START---------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/marshal")
            _kale_marshal_utils.save(model_name, "model_name")
            _kale_marshal_utils.save(namespace, "namespace")
            # -----------------------DATA SAVING END-----------------------------------
            '''

            # run the code blocks inside a jupyter kernel
            from kale.utils.jupyter_utils import run_code as _kale_run_code
            from kale.utils.kfp_utils import\
                update_uimetadata as _kale_update_uimetadata
            blocks = (pipeline_parameters_block, data_loading_block,
                      block1,
                      block2,
                      block3,
                      block4,
                      block5,
                      data_saving_block)
            html_artifact = _kale_run_code(blocks)
            with open("/deploy_outlier.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('deploy_outlier')

            _kale_mlmd_utils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Deploy outlier', description='')
        _parser.add_argument("--DEPLOY-PASSWORD", dest="DEPLOY_PASSWORD", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-SERVER", dest="DEPLOY_SERVER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-USER", dest="DEPLOY_USER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-ACCESS-KEY", dest="MINIO_ACCESS_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-HOST", dest="MINIO_HOST", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-SECRET-KEY", dest="MINIO_SECRET_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = deploy_outlier(**_parsed_args)

        _output_serializers = [

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      "image": |-
        seldonio/jupyter-lab-alibi-kale:0.23
      "securityContext":
        "runAsUser": !!int |-
          0
      "volumeMounts":
      - "mountPath": |-
          /marshal
        "name": |-
          kale-marshal-volume
      "workingDir": |-
        /home/jovyan
    "inputs":
      "parameters":
      - "name": |-
          DEPLOY_PASSWORD
      - "name": |-
          DEPLOY_SERVER
      - "name": |-
          DEPLOY_USER
      - "name": |-
          MINIO_ACCESS_KEY
      - "name": |-
          MINIO_HOST
      - "name": |-
          MINIO_SECRET_KEY
      - "name": |-
          kale-marshal-volume-name
    "metadata":
      "annotations":
        "kubeflow-kale.org/dependent-templates": |-
          ["Deploy seldon", "kale-marshal-volume"]
        "kubeflow-kale.org/volume-name-parameters": |-
          ["kale-marshal-volume-name"]
        "pipelines.kubeflow.org/component_spec": |-
          {"inputs": [{"name": "DEPLOY_PASSWORD", "type": "String"}, {"name": "DEPLOY_SERVER", "type": "String"}, {"name": "DEPLOY_USER", "type": "String"}, {"name": "MINIO_ACCESS_KEY", "type": "String"}, {"name": "MINIO_HOST", "type": "String"}, {"name": "MINIO_SECRET_KEY", "type": "String"}], "name": "Deploy outlier"}
      "labels":
        "pipelines.kubeflow.org/metadata_written": |-
          true
    "name": |-
      deploy-outlier
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          deploy_outlier
        "path": |-
          /deploy_outlier.html
    "volumes":
    - "name": |-
        kale-marshal-volume
      "persistentVolumeClaim":
        "claimName": |-
          {{inputs.parameters.kale-marshal-volume-name}}
  - "container":
      "args":
      - |-
        --DEPLOY-NAMESPACE
      - |-
        {{inputs.parameters.DEPLOY_NAMESPACE}}
      - |-
        --DEPLOY-PASSWORD
      - |-
        {{inputs.parameters.DEPLOY_PASSWORD}}
      - |-
        --DEPLOY-SERVER
      - |-
        {{inputs.parameters.DEPLOY_SERVER}}
      - |-
        --DEPLOY-USER
      - |-
        {{inputs.parameters.DEPLOY_USER}}
      - |-
        --MINIO-ACCESS-KEY
      - |-
        {{inputs.parameters.MINIO_ACCESS_KEY}}
      - |-
        --MINIO-HOST
      - |-
        {{inputs.parameters.MINIO_HOST}}
      - |-
        --MINIO-SECRET-KEY
      - |-
        {{inputs.parameters.MINIO_SECRET_KEY}}
      "command":
      - |-
        python3
      - |-
        -u
      - |-
        -c
      - |
        def deploy_seldon(DEPLOY_NAMESPACE , DEPLOY_PASSWORD , DEPLOY_SERVER , DEPLOY_USER , MINIO_ACCESS_KEY , MINIO_HOST , MINIO_SECRET_KEY ):
            pipeline_parameters_block = '''
            DEPLOY_NAMESPACE = "{}"
            DEPLOY_PASSWORD = "{}"
            DEPLOY_SERVER = "{}"
            DEPLOY_USER = "{}"
            MINIO_ACCESS_KEY = "{}"
            MINIO_HOST = "{}"
            MINIO_SECRET_KEY = "{}"
            '''.format(DEPLOY_NAMESPACE, DEPLOY_PASSWORD, DEPLOY_SERVER, DEPLOY_USER, MINIO_ACCESS_KEY, MINIO_HOST, MINIO_SECRET_KEY)

            from kale.utils import mlmd_utils as _kale_mlmd_utils
            _kale_mlmd_utils.init_metadata()

            block1 = '''
            import numpy as np
            from sklearn.ensemble import RandomForestClassifier
            from sklearn.compose import ColumnTransformer
            from sklearn.pipeline import Pipeline
            from sklearn.impute import SimpleImputer
            from sklearn.metrics import accuracy_score
            from sklearn.preprocessing import StandardScaler, OneHotEncoder
            from alibi.explainers import AnchorTabular
            from alibi.datasets import fetch_adult
            from minio import Minio
            from minio.error import ResponseError
            from joblib import dump, load
            import dill
            import time
            import json
            from subprocess import run, Popen, PIPE
            from alibi_detect.utils.data import create_outlier_batch
            import swagger_client
            from swagger_client.rest import ApiException
            import yaml
            import json
            import urllib3
            urllib3.disable_warnings()
            '''

            block2 = '''
            def get_minio():
                return Minio(MINIO_HOST,
                                access_key=MINIO_ACCESS_KEY,
                                secret_key=MINIO_SECRET_KEY,
                                secure=False)
            '''

            block3 = '''
            def get_swagger_configuration():
                configuration = swagger_client.Configuration()
                configuration.host = 'http://seldon-deploy.seldon-system/seldon-deploy/api/v1alpha1'
                return configuration
            '''

            block4 = '''
            import requests

            from urllib.parse import urlparse

            KF_SESSION_COOKIE_NAME = "authservice_session"

            class SessionAuthenticator:
                """
                Returns the cookie token.
                """

                def __init__(self, server: str):
                    self._server = server

                    url = urlparse(server)
                    self._host = f"{url.scheme}://{url.netloc}"

                def authenticate(self, user: str, password: str) -> str:
                    auth_path = self._get_auth_path()
                    success_path = self._submit_auth(auth_path, user, password)
                    session_cookie = self._get_session_cookie(success_path)
                    return session_cookie

                def _get_auth_path(self) -> str:
                    # Send unauthenticated request
                    res = requests.get(self._server, allow_redirects=False, verify=False)

                    # Follow the 302 redirect
                    oidc_path = res.headers["Location"]
                    oidc_endpoint = f"{self._host}{oidc_path}"
                    res = requests.get(oidc_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _submit_auth(self, auth_path: str, user: str, password: str) -> str:
                    auth_endpoint = f"{self._host}{auth_path}"
                    auth_payload = {"login": user, "password": password}
                    res = requests.post(auth_endpoint, auth_payload, allow_redirects=False, verify=False)

                    login_path = res.headers["Location"]
                    login_endpoint = f"{self._host}{login_path}"
                    res = requests.get(login_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _get_session_cookie(self, success_path: str) -> str:
                    success_endpoint = f"{self._host}{success_path}"
                    res = requests.get(success_endpoint, allow_redirects=False, verify=False)
                    print(res.cookies)
                    return res.cookies[KF_SESSION_COOKIE_NAME]

            def authenticate():
                authenticator = SessionAuthenticator(DEPLOY_SERVER)

                cookie = authenticator.authenticate(DEPLOY_USER, DEPLOY_PASSWORD)
                return cookie
            '''

            block5 = '''
            secret = f"""apiVersion: v1
            kind: Secret
            metadata:
              name: seldon-init-container-secret
              namespace: seldon-logs
            type: Opaque
            stringData:
              AWS_ACCESS_KEY_ID: {MINIO_ACCESS_KEY}
              AWS_SECRET_ACCESS_KEY: {MINIO_SECRET_KEY}
              AWS_ENDPOINT_URL: http://{MINIO_HOST}
              USE_SSL: "false"
            """
            with open("secret.yaml","w") as f:
                f.write(secret)
            run("cat secret.yaml | kubectl apply -f -", shell=True)
            '''

            block6 = '''
            sa = f"""apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: minio-sa
              namespace: seldon-logs
            secrets:
              - name: seldon-init-container-secret
            """
            with open("sa.yaml","w") as f:
                f.write(sa)
            run("kubectl apply -f sa.yaml", shell=True)
            '''

            block7 = '''
            secret = f"""apiVersion: v1
            kind: Secret
            metadata:
              name: seldon-init-container-secret
              namespace: {DEPLOY_NAMESPACE}
            type: Opaque
            stringData:
              AWS_ACCESS_KEY_ID: {MINIO_ACCESS_KEY}
              AWS_SECRET_ACCESS_KEY: {MINIO_SECRET_KEY}
              AWS_ENDPOINT_URL: http://{MINIO_HOST}
              USE_SSL: "false"
            """
            with open("secret.yaml","w") as f:
                f.write(secret)
            run("cat secret.yaml | kubectl apply -f -", shell=True)
            '''

            block8 = '''
            sa = f"""apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: minio-sa
              namespace: {DEPLOY_NAMESPACE}
            secrets:
              - name: seldon-init-container-secret
            """
            with open("sa.yaml","w") as f:
                f.write(sa)
            run("kubectl apply -f sa.yaml", shell=True)
            '''

            block9 = '''
            configuration = get_swagger_configuration()
            # create an instance of the API class
            dep_instance = swagger_client.SeldonDeploymentsApi(swagger_client.ApiClient(configuration))
            namespace = 'admin' # str | Namespace provides a logical grouping of resources
            '''

            block10 = '''
            from swagger_client.models.seldon_deployment import SeldonDeployment
            from swagger_client.models.seldon_deployment_spec import SeldonDeploymentSpec
            from swagger_client.models.predictor_spec import PredictorSpec
            from swagger_client.models.predictive_unit import PredictiveUnit
            from swagger_client.models.logger import Logger
            from swagger_client.models.object_meta import ObjectMeta
            from swagger_client.models.type_meta import TypeMeta
            from swagger_client.models.explainer import Explainer

            model_name="income-classifier"
            sd = SeldonDeployment(kind="SeldonDeployment",
                                  api_version="v1",
                                  metadata=ObjectMeta(name=model_name,namespace=namespace),
                                  spec=SeldonDeploymentSpec(predictors=[
                                      PredictorSpec(graph=PredictiveUnit(implementation="SKLEARN_SERVER",
                                                                         model_uri="s3://seldon/sklearn/income/model",
                                                                         env_secret_ref_name="seldon-init-container-secret",
                                                                         name="classifier",
                                                                         logger=Logger(mode="all",url="http://broker-ingress.knative-eventing.svc.cluster.local/seldon-logs/default")),
                                                    explainer=Explainer(type="AnchorTabular",
                                                                        model_uri="s3://seldon/sklearn/income/explainer",
                                                                        env_secret_ref_name="seldon-init-container-secret"),
                                                    name="default",
                                                    replicas=1)
                                  ]))
            created = dep_instance.create_seldon_deployment(namespace, sd)
            '''

            block11 = '''
            state = ""
            while not state == "Available":
                res = dep_instance.list_seldon_deployments(namespace)
                for sd in res.items:
                    state = sd.status.state
                    print(sd.status.state)
                time.sleep(2)
            time.sleep(10)
            '''

            block12 = '''
            cookie = authenticate()
            payload='{"data": {"ndarray": [[53,4,0,2,8,4,4,0,0,0,60,9]]}}'
            cookie_str = f"{KF_SESSION_COOKIE_NAME}={cookie}"
            predict_instance = swagger_client.PredictApi(swagger_client.ApiClient(configuration,cookie=cookie_str))
            prediction = predict_instance.predict_seldon_deployment(model_name,namespace, prediction={"data": {"ndarray": [[53,4,0,2,8,4,4,0,0,0,60,9]]}})
            print(prediction)
            '''

            block13 = '''
            explain_instance = swagger_client.ExplainerApi(swagger_client.ApiClient(configuration,cookie=cookie_str))
            tries = 0
            try:
                explanation = explain_instance.explain_seldon_deployment(namespace,model_name,explaindata={"data": {"ndarray": [[53,4,0,2,8,4,4,0,0,0,60,9]]}})
                print(explanation)
            except ApiException as e:
                print(e)
                if tries > 5:
                    raise e
                print("Retrying")
                tries = tries +1
                time.sleep(5)
            '''

            data_saving_block = '''
            # -----------------------DATA SAVING START---------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/marshal")
            _kale_marshal_utils.save(model_name, "model_name")
            _kale_marshal_utils.save(namespace, "namespace")
            # -----------------------DATA SAVING END-----------------------------------
            '''

            # run the code blocks inside a jupyter kernel
            from kale.utils.jupyter_utils import run_code as _kale_run_code
            from kale.utils.kfp_utils import\
                update_uimetadata as _kale_update_uimetadata
            blocks = (pipeline_parameters_block,
                      block1,
                      block2,
                      block3,
                      block4,
                      block5,
                      block6,
                      block7,
                      block8,
                      block9,
                      block10,
                      block11,
                      block12,
                      block13,
                      data_saving_block)
            html_artifact = _kale_run_code(blocks)
            with open("/deploy_seldon.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('deploy_seldon')

            _kale_mlmd_utils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Deploy seldon', description='')
        _parser.add_argument("--DEPLOY-NAMESPACE", dest="DEPLOY_NAMESPACE", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-PASSWORD", dest="DEPLOY_PASSWORD", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-SERVER", dest="DEPLOY_SERVER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-USER", dest="DEPLOY_USER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-ACCESS-KEY", dest="MINIO_ACCESS_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-HOST", dest="MINIO_HOST", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-SECRET-KEY", dest="MINIO_SECRET_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = deploy_seldon(**_parsed_args)

        _output_serializers = [

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      "image": |-
        seldonio/jupyter-lab-alibi-kale:0.23
      "securityContext":
        "runAsUser": !!int |-
          0
      "volumeMounts":
      - "mountPath": |-
          /marshal
        "name": |-
          kale-marshal-volume
      "workingDir": |-
        /home/jovyan
    "inputs":
      "parameters":
      - "name": |-
          DEPLOY_NAMESPACE
      - "name": |-
          DEPLOY_PASSWORD
      - "name": |-
          DEPLOY_SERVER
      - "name": |-
          DEPLOY_USER
      - "name": |-
          MINIO_ACCESS_KEY
      - "name": |-
          MINIO_HOST
      - "name": |-
          MINIO_SECRET_KEY
      - "name": |-
          kale-marshal-volume-name
    "metadata":
      "annotations":
        "kubeflow-kale.org/dependent-templates": |-
          ["Train explainer", "kale-marshal-volume"]
        "kubeflow-kale.org/volume-name-parameters": |-
          ["kale-marshal-volume-name"]
        "pipelines.kubeflow.org/component_spec": |-
          {"inputs": [{"name": "DEPLOY_NAMESPACE", "type": "String"}, {"name": "DEPLOY_PASSWORD", "type": "String"}, {"name": "DEPLOY_SERVER", "type": "String"}, {"name": "DEPLOY_USER", "type": "String"}, {"name": "MINIO_ACCESS_KEY", "type": "String"}, {"name": "MINIO_HOST", "type": "String"}, {"name": "MINIO_SECRET_KEY", "type": "String"}], "name": "Deploy seldon"}
      "labels":
        "pipelines.kubeflow.org/metadata_written": |-
          true
    "name": |-
      deploy-seldon
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          deploy_seldon
        "path": |-
          /deploy_seldon.html
    "volumes":
    - "name": |-
        kale-marshal-volume
      "persistentVolumeClaim":
        "claimName": |-
          {{inputs.parameters.kale-marshal-volume-name}}
  - "container":
      "args":
      - |-
        --DEPLOY-PASSWORD
      - |-
        {{inputs.parameters.DEPLOY_PASSWORD}}
      - |-
        --DEPLOY-SERVER
      - |-
        {{inputs.parameters.DEPLOY_SERVER}}
      - |-
        --DEPLOY-USER
      - |-
        {{inputs.parameters.DEPLOY_USER}}
      - |-
        --MINIO-ACCESS-KEY
      - |-
        {{inputs.parameters.MINIO_ACCESS_KEY}}
      - |-
        --MINIO-HOST
      - |-
        {{inputs.parameters.MINIO_HOST}}
      - |-
        --MINIO-SECRET-KEY
      - |-
        {{inputs.parameters.MINIO_SECRET_KEY}}
      "command":
      - |-
        python3
      - |-
        -u
      - |-
        -c
      - |
        def explain(DEPLOY_PASSWORD , DEPLOY_SERVER , DEPLOY_USER , MINIO_ACCESS_KEY , MINIO_HOST , MINIO_SECRET_KEY ):
            pipeline_parameters_block = '''
            DEPLOY_PASSWORD = "{}"
            DEPLOY_SERVER = "{}"
            DEPLOY_USER = "{}"
            MINIO_ACCESS_KEY = "{}"
            MINIO_HOST = "{}"
            MINIO_SECRET_KEY = "{}"
            '''.format(DEPLOY_PASSWORD, DEPLOY_SERVER, DEPLOY_USER, MINIO_ACCESS_KEY, MINIO_HOST, MINIO_SECRET_KEY)

            from kale.utils import mlmd_utils as _kale_mlmd_utils
            _kale_mlmd_utils.init_metadata()

            data_loading_block = '''
            # -----------------------DATA LOADING START--------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/marshal")
            _kale_marshal_utils.set_kale_directory_file_names()
            X_test = _kale_marshal_utils.load("X_test")
            X_train = _kale_marshal_utils.load("X_train")
            adult = _kale_marshal_utils.load("adult")
            explainer = _kale_marshal_utils.load("explainer")
            model = _kale_marshal_utils.load("model")
            # -----------------------DATA LOADING END----------------------------------
            '''

            block1 = '''
            import numpy as np
            from sklearn.ensemble import RandomForestClassifier
            from sklearn.compose import ColumnTransformer
            from sklearn.pipeline import Pipeline
            from sklearn.impute import SimpleImputer
            from sklearn.metrics import accuracy_score
            from sklearn.preprocessing import StandardScaler, OneHotEncoder
            from alibi.explainers import AnchorTabular
            from alibi.datasets import fetch_adult
            from minio import Minio
            from minio.error import ResponseError
            from joblib import dump, load
            import dill
            import time
            import json
            from subprocess import run, Popen, PIPE
            from alibi_detect.utils.data import create_outlier_batch
            import swagger_client
            from swagger_client.rest import ApiException
            import yaml
            import json
            import urllib3
            urllib3.disable_warnings()
            '''

            block2 = '''
            def get_minio():
                return Minio(MINIO_HOST,
                                access_key=MINIO_ACCESS_KEY,
                                secret_key=MINIO_SECRET_KEY,
                                secure=False)
            '''

            block3 = '''
            def get_swagger_configuration():
                configuration = swagger_client.Configuration()
                configuration.host = 'http://seldon-deploy.seldon-system/seldon-deploy/api/v1alpha1'
                return configuration
            '''

            block4 = '''
            import requests

            from urllib.parse import urlparse

            KF_SESSION_COOKIE_NAME = "authservice_session"

            class SessionAuthenticator:
                """
                Returns the cookie token.
                """

                def __init__(self, server: str):
                    self._server = server

                    url = urlparse(server)
                    self._host = f"{url.scheme}://{url.netloc}"

                def authenticate(self, user: str, password: str) -> str:
                    auth_path = self._get_auth_path()
                    success_path = self._submit_auth(auth_path, user, password)
                    session_cookie = self._get_session_cookie(success_path)
                    return session_cookie

                def _get_auth_path(self) -> str:
                    # Send unauthenticated request
                    res = requests.get(self._server, allow_redirects=False, verify=False)

                    # Follow the 302 redirect
                    oidc_path = res.headers["Location"]
                    oidc_endpoint = f"{self._host}{oidc_path}"
                    res = requests.get(oidc_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _submit_auth(self, auth_path: str, user: str, password: str) -> str:
                    auth_endpoint = f"{self._host}{auth_path}"
                    auth_payload = {"login": user, "password": password}
                    res = requests.post(auth_endpoint, auth_payload, allow_redirects=False, verify=False)

                    login_path = res.headers["Location"]
                    login_endpoint = f"{self._host}{login_path}"
                    res = requests.get(login_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _get_session_cookie(self, success_path: str) -> str:
                    success_endpoint = f"{self._host}{success_path}"
                    res = requests.get(success_endpoint, allow_redirects=False, verify=False)
                    print(res.cookies)
                    return res.cookies[KF_SESSION_COOKIE_NAME]

            def authenticate():
                authenticator = SessionAuthenticator(DEPLOY_SERVER)

                cookie = authenticator.authenticate(DEPLOY_USER, DEPLOY_PASSWORD)
                return cookie
            '''

            block5 = '''
            model.predict(X_train)
            idx = 0
            class_names = adult.target_names
            print('Prediction: ', class_names[explainer.predictor(X_test[idx].reshape(1, -1))[0]])
            '''

            block6 = '''
            explanation = explainer.explain(X_test[idx], threshold=0.95)
            print('Anchor: %s' % (' AND '.join(explanation.anchor)))
            print('Precision: %.2f' % explanation.precision)
            print('Coverage: %.2f' % explanation.coverage)
            '''

            # run the code blocks inside a jupyter kernel
            from kale.utils.jupyter_utils import run_code as _kale_run_code
            from kale.utils.kfp_utils import\
                update_uimetadata as _kale_update_uimetadata
            blocks = (pipeline_parameters_block, data_loading_block,
                      block1,
                      block2,
                      block3,
                      block4,
                      block5,
                      block6,
                      )
            html_artifact = _kale_run_code(blocks)
            with open("/explain.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('explain')

            _kale_mlmd_utils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Explain', description='')
        _parser.add_argument("--DEPLOY-PASSWORD", dest="DEPLOY_PASSWORD", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-SERVER", dest="DEPLOY_SERVER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-USER", dest="DEPLOY_USER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-ACCESS-KEY", dest="MINIO_ACCESS_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-HOST", dest="MINIO_HOST", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-SECRET-KEY", dest="MINIO_SECRET_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = explain(**_parsed_args)

        _output_serializers = [

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      "image": |-
        seldonio/jupyter-lab-alibi-kale:0.23
      "securityContext":
        "runAsUser": !!int |-
          0
      "volumeMounts":
      - "mountPath": |-
          /marshal
        "name": |-
          kale-marshal-volume
      "workingDir": |-
        /home/jovyan
    "inputs":
      "parameters":
      - "name": |-
          DEPLOY_PASSWORD
      - "name": |-
          DEPLOY_SERVER
      - "name": |-
          DEPLOY_USER
      - "name": |-
          MINIO_ACCESS_KEY
      - "name": |-
          MINIO_HOST
      - "name": |-
          MINIO_SECRET_KEY
      - "name": |-
          kale-marshal-volume-name
    "metadata":
      "annotations":
        "kubeflow-kale.org/dependent-templates": |-
          ["Train explainer", "kale-marshal-volume"]
        "kubeflow-kale.org/volume-name-parameters": |-
          ["kale-marshal-volume-name"]
        "pipelines.kubeflow.org/component_spec": |-
          {"inputs": [{"name": "DEPLOY_PASSWORD", "type": "String"}, {"name": "DEPLOY_SERVER", "type": "String"}, {"name": "DEPLOY_USER", "type": "String"}, {"name": "MINIO_ACCESS_KEY", "type": "String"}, {"name": "MINIO_HOST", "type": "String"}, {"name": "MINIO_SECRET_KEY", "type": "String"}], "name": "Explain"}
      "labels":
        "pipelines.kubeflow.org/metadata_written": |-
          true
    "name": |-
      explain
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          explain
        "path": |-
          /explain.html
    "volumes":
    - "name": |-
        kale-marshal-volume
      "persistentVolumeClaim":
        "claimName": |-
          {{inputs.parameters.kale-marshal-volume-name}}
  - "name": |-
      kale-marshal-volume
    "outputs":
      "parameters":
      - "name": |-
          kale-marshal-volume-manifest
        "valueFrom":
          "jsonPath": |-
            {}
      - "name": |-
          kale-marshal-volume-name
        "valueFrom":
          "jsonPath": |-
            {.metadata.name}
      - "name": |-
          kale-marshal-volume-size
        "valueFrom":
          "jsonPath": |-
            {.status.capacity.storage}
    "resource":
      "action": |-
        create
      "manifest": |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: '{{workflow.name}}-kale-marshal-pvc'
        spec:
          storageClassName: nfs-client
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 1Gi
  - "dag":
      "tasks":
      - "arguments":
          "parameters":
          - "name": |-
              DEPLOY_PASSWORD
            "value": |-
              {{inputs.parameters.DEPLOY_PASSWORD}}
          - "name": |-
              DEPLOY_SERVER
            "value": |-
              {{inputs.parameters.DEPLOY_SERVER}}
          - "name": |-
              DEPLOY_USER
            "value": |-
              {{inputs.parameters.DEPLOY_USER}}
          - "name": |-
              INCOME_MODEL_PATH
            "value": |-
              {{inputs.parameters.INCOME_MODEL_PATH}}
          - "name": |-
              MINIO_ACCESS_KEY
            "value": |-
              {{inputs.parameters.MINIO_ACCESS_KEY}}
          - "name": |-
              MINIO_HOST
            "value": |-
              {{inputs.parameters.MINIO_HOST}}
          - "name": |-
              MINIO_MODEL_BUCKET
            "value": |-
              {{inputs.parameters.MINIO_MODEL_BUCKET}}
          - "name": |-
              MINIO_SECRET_KEY
            "value": |-
              {{inputs.parameters.MINIO_SECRET_KEY}}
          - "name": |-
              kale-marshal-volume-name
            "value": |-
              {{tasks.kale-marshal-volume.outputs.parameters.kale-marshal-volume-name}}
        "dependencies":
        - |-
          kale-marshal-volume
        - |-
          setup
        "name": |-
          build-model
        "template": |-
          build-model
      - "arguments":
          "parameters":
          - "name": |-
              DEPLOY_PASSWORD
            "value": |-
              {{inputs.parameters.DEPLOY_PASSWORD}}
          - "name": |-
              DEPLOY_SERVER
            "value": |-
              {{inputs.parameters.DEPLOY_SERVER}}
          - "name": |-
              DEPLOY_USER
            "value": |-
              {{inputs.parameters.DEPLOY_USER}}
          - "name": |-
              MINIO_ACCESS_KEY
            "value": |-
              {{inputs.parameters.MINIO_ACCESS_KEY}}
          - "name": |-
              MINIO_HOST
            "value": |-
              {{inputs.parameters.MINIO_HOST}}
          - "name": |-
              MINIO_MODEL_BUCKET
            "value": |-
              {{inputs.parameters.MINIO_MODEL_BUCKET}}
          - "name": |-
              MINIO_SECRET_KEY
            "value": |-
              {{inputs.parameters.MINIO_SECRET_KEY}}
          - "name": |-
              OUTLIER_MODEL_PATH
            "value": |-
              {{inputs.parameters.OUTLIER_MODEL_PATH}}
          - "name": |-
              kale-marshal-volume-name
            "value": |-
              {{tasks.kale-marshal-volume.outputs.parameters.kale-marshal-volume-name}}
        "dependencies":
        - |-
          build-model
        - |-
          kale-marshal-volume
        "name": |-
          build-outlier
        "template": |-
          build-outlier
      - "arguments":
          "parameters":
          - "name": |-
              DEPLOY_NAMESPACE
            "value": |-
              {{inputs.parameters.DEPLOY_NAMESPACE}}
          - "name": |-
              DEPLOY_PASSWORD
            "value": |-
              {{inputs.parameters.DEPLOY_PASSWORD}}
          - "name": |-
              DEPLOY_SERVER
            "value": |-
              {{inputs.parameters.DEPLOY_SERVER}}
          - "name": |-
              DEPLOY_USER
            "value": |-
              {{inputs.parameters.DEPLOY_USER}}
          - "name": |-
              MINIO_ACCESS_KEY
            "value": |-
              {{inputs.parameters.MINIO_ACCESS_KEY}}
          - "name": |-
              MINIO_HOST
            "value": |-
              {{inputs.parameters.MINIO_HOST}}
          - "name": |-
              MINIO_SECRET_KEY
            "value": |-
              {{inputs.parameters.MINIO_SECRET_KEY}}
          - "name": |-
              kale-marshal-volume-name
            "value": |-
              {{tasks.kale-marshal-volume.outputs.parameters.kale-marshal-volume-name}}
        "dependencies":
        - |-
          deploy-outlier
        - |-
          kale-marshal-volume
        "name": |-
          deploy-event-display
        "template": |-
          deploy-event-display
      - "arguments":
          "parameters":
          - "name": |-
              DEPLOY_PASSWORD
            "value": |-
              {{inputs.parameters.DEPLOY_PASSWORD}}
          - "name": |-
              DEPLOY_SERVER
            "value": |-
              {{inputs.parameters.DEPLOY_SERVER}}
          - "name": |-
              DEPLOY_USER
            "value": |-
              {{inputs.parameters.DEPLOY_USER}}
          - "name": |-
              MINIO_ACCESS_KEY
            "value": |-
              {{inputs.parameters.MINIO_ACCESS_KEY}}
          - "name": |-
              MINIO_HOST
            "value": |-
              {{inputs.parameters.MINIO_HOST}}
          - "name": |-
              MINIO_SECRET_KEY
            "value": |-
              {{inputs.parameters.MINIO_SECRET_KEY}}
          - "name": |-
              kale-marshal-volume-name
            "value": |-
              {{tasks.kale-marshal-volume.outputs.parameters.kale-marshal-volume-name}}
        "dependencies":
        - |-
          deploy-seldon
        - |-
          kale-marshal-volume
        "name": |-
          deploy-outlier
        "template": |-
          deploy-outlier
      - "arguments":
          "parameters":
          - "name": |-
              DEPLOY_NAMESPACE
            "value": |-
              {{inputs.parameters.DEPLOY_NAMESPACE}}
          - "name": |-
              DEPLOY_PASSWORD
            "value": |-
              {{inputs.parameters.DEPLOY_PASSWORD}}
          - "name": |-
              DEPLOY_SERVER
            "value": |-
              {{inputs.parameters.DEPLOY_SERVER}}
          - "name": |-
              DEPLOY_USER
            "value": |-
              {{inputs.parameters.DEPLOY_USER}}
          - "name": |-
              MINIO_ACCESS_KEY
            "value": |-
              {{inputs.parameters.MINIO_ACCESS_KEY}}
          - "name": |-
              MINIO_HOST
            "value": |-
              {{inputs.parameters.MINIO_HOST}}
          - "name": |-
              MINIO_SECRET_KEY
            "value": |-
              {{inputs.parameters.MINIO_SECRET_KEY}}
          - "name": |-
              kale-marshal-volume-name
            "value": |-
              {{tasks.kale-marshal-volume.outputs.parameters.kale-marshal-volume-name}}
        "dependencies":
        - |-
          kale-marshal-volume
        - |-
          train-explainer
        "name": |-
          deploy-seldon
        "template": |-
          deploy-seldon
      - "arguments":
          "parameters":
          - "name": |-
              DEPLOY_PASSWORD
            "value": |-
              {{inputs.parameters.DEPLOY_PASSWORD}}
          - "name": |-
              DEPLOY_SERVER
            "value": |-
              {{inputs.parameters.DEPLOY_SERVER}}
          - "name": |-
              DEPLOY_USER
            "value": |-
              {{inputs.parameters.DEPLOY_USER}}
          - "name": |-
              MINIO_ACCESS_KEY
            "value": |-
              {{inputs.parameters.MINIO_ACCESS_KEY}}
          - "name": |-
              MINIO_HOST
            "value": |-
              {{inputs.parameters.MINIO_HOST}}
          - "name": |-
              MINIO_SECRET_KEY
            "value": |-
              {{inputs.parameters.MINIO_SECRET_KEY}}
          - "name": |-
              kale-marshal-volume-name
            "value": |-
              {{tasks.kale-marshal-volume.outputs.parameters.kale-marshal-volume-name}}
        "dependencies":
        - |-
          kale-marshal-volume
        - |-
          train-explainer
        "name": |-
          explain
        "template": |-
          explain
      - "name": |-
          kale-marshal-volume
        "template": |-
          kale-marshal-volume
      - "arguments":
          "parameters":
          - "name": |-
              DEPLOY_PASSWORD
            "value": |-
              {{inputs.parameters.DEPLOY_PASSWORD}}
          - "name": |-
              DEPLOY_SERVER
            "value": |-
              {{inputs.parameters.DEPLOY_SERVER}}
          - "name": |-
              DEPLOY_USER
            "value": |-
              {{inputs.parameters.DEPLOY_USER}}
          - "name": |-
              MINIO_ACCESS_KEY
            "value": |-
              {{inputs.parameters.MINIO_ACCESS_KEY}}
          - "name": |-
              MINIO_HOST
            "value": |-
              {{inputs.parameters.MINIO_HOST}}
          - "name": |-
              MINIO_MODEL_BUCKET
            "value": |-
              {{inputs.parameters.MINIO_MODEL_BUCKET}}
          - "name": |-
              MINIO_SECRET_KEY
            "value": |-
              {{inputs.parameters.MINIO_SECRET_KEY}}
          - "name": |-
              kale-marshal-volume-name
            "value": |-
              {{tasks.kale-marshal-volume.outputs.parameters.kale-marshal-volume-name}}
        "dependencies":
        - |-
          kale-marshal-volume
        "name": |-
          setup
        "template": |-
          setup
      - "arguments":
          "parameters":
          - "name": |-
              DEPLOY_NAMESPACE
            "value": |-
              {{inputs.parameters.DEPLOY_NAMESPACE}}
          - "name": |-
              DEPLOY_PASSWORD
            "value": |-
              {{inputs.parameters.DEPLOY_PASSWORD}}
          - "name": |-
              DEPLOY_SERVER
            "value": |-
              {{inputs.parameters.DEPLOY_SERVER}}
          - "name": |-
              DEPLOY_USER
            "value": |-
              {{inputs.parameters.DEPLOY_USER}}
          - "name": |-
              MINIO_ACCESS_KEY
            "value": |-
              {{inputs.parameters.MINIO_ACCESS_KEY}}
          - "name": |-
              MINIO_HOST
            "value": |-
              {{inputs.parameters.MINIO_HOST}}
          - "name": |-
              MINIO_SECRET_KEY
            "value": |-
              {{inputs.parameters.MINIO_SECRET_KEY}}
          - "name": |-
              kale-marshal-volume-name
            "value": |-
              {{tasks.kale-marshal-volume.outputs.parameters.kale-marshal-volume-name}}
        "dependencies":
        - |-
          deploy-event-display
        - |-
          kale-marshal-volume
        "name": |-
          test-outlier-detection
        "template": |-
          test-outlier-detection
      - "arguments":
          "parameters":
          - "name": |-
              DEPLOY_PASSWORD
            "value": |-
              {{inputs.parameters.DEPLOY_PASSWORD}}
          - "name": |-
              DEPLOY_SERVER
            "value": |-
              {{inputs.parameters.DEPLOY_SERVER}}
          - "name": |-
              DEPLOY_USER
            "value": |-
              {{inputs.parameters.DEPLOY_USER}}
          - "name": |-
              EXPLAINER_MODEL_PATH
            "value": |-
              {{inputs.parameters.EXPLAINER_MODEL_PATH}}
          - "name": |-
              MINIO_ACCESS_KEY
            "value": |-
              {{inputs.parameters.MINIO_ACCESS_KEY}}
          - "name": |-
              MINIO_HOST
            "value": |-
              {{inputs.parameters.MINIO_HOST}}
          - "name": |-
              MINIO_MODEL_BUCKET
            "value": |-
              {{inputs.parameters.MINIO_MODEL_BUCKET}}
          - "name": |-
              MINIO_SECRET_KEY
            "value": |-
              {{inputs.parameters.MINIO_SECRET_KEY}}
          - "name": |-
              kale-marshal-volume-name
            "value": |-
              {{tasks.kale-marshal-volume.outputs.parameters.kale-marshal-volume-name}}
        "dependencies":
        - |-
          build-model
        - |-
          kale-marshal-volume
        "name": |-
          train-explainer
        "template": |-
          train-explainer
    "inputs":
      "parameters":
      - "name": |-
          DEPLOY_NAMESPACE
      - "name": |-
          DEPLOY_PASSWORD
      - "name": |-
          DEPLOY_SERVER
      - "name": |-
          DEPLOY_USER
      - "name": |-
          EXPLAINER_MODEL_PATH
      - "name": |-
          INCOME_MODEL_PATH
      - "name": |-
          MINIO_ACCESS_KEY
      - "name": |-
          MINIO_HOST
      - "name": |-
          MINIO_MODEL_BUCKET
      - "name": |-
          MINIO_SECRET_KEY
      - "name": |-
          OUTLIER_MODEL_PATH
    "name": |-
      seldon-e2e-adult-xfdxg
  - "container":
      "args":
      - |-
        --DEPLOY-PASSWORD
      - |-
        {{inputs.parameters.DEPLOY_PASSWORD}}
      - |-
        --DEPLOY-SERVER
      - |-
        {{inputs.parameters.DEPLOY_SERVER}}
      - |-
        --DEPLOY-USER
      - |-
        {{inputs.parameters.DEPLOY_USER}}
      - |-
        --MINIO-ACCESS-KEY
      - |-
        {{inputs.parameters.MINIO_ACCESS_KEY}}
      - |-
        --MINIO-HOST
      - |-
        {{inputs.parameters.MINIO_HOST}}
      - |-
        --MINIO-MODEL-BUCKET
      - |-
        {{inputs.parameters.MINIO_MODEL_BUCKET}}
      - |-
        --MINIO-SECRET-KEY
      - |-
        {{inputs.parameters.MINIO_SECRET_KEY}}
      "command":
      - |-
        python3
      - |-
        -u
      - |-
        -c
      - |
        def setup(DEPLOY_PASSWORD , DEPLOY_SERVER , DEPLOY_USER , MINIO_ACCESS_KEY , MINIO_HOST , MINIO_MODEL_BUCKET , MINIO_SECRET_KEY ):
            pipeline_parameters_block = '''
            DEPLOY_PASSWORD = "{}"
            DEPLOY_SERVER = "{}"
            DEPLOY_USER = "{}"
            MINIO_ACCESS_KEY = "{}"
            MINIO_HOST = "{}"
            MINIO_MODEL_BUCKET = "{}"
            MINIO_SECRET_KEY = "{}"
            '''.format(DEPLOY_PASSWORD, DEPLOY_SERVER, DEPLOY_USER, MINIO_ACCESS_KEY, MINIO_HOST, MINIO_MODEL_BUCKET, MINIO_SECRET_KEY)

            from kale.utils import mlmd_utils as _kale_mlmd_utils
            _kale_mlmd_utils.init_metadata()

            block1 = '''
            import numpy as np
            from sklearn.ensemble import RandomForestClassifier
            from sklearn.compose import ColumnTransformer
            from sklearn.pipeline import Pipeline
            from sklearn.impute import SimpleImputer
            from sklearn.metrics import accuracy_score
            from sklearn.preprocessing import StandardScaler, OneHotEncoder
            from alibi.explainers import AnchorTabular
            from alibi.datasets import fetch_adult
            from minio import Minio
            from minio.error import ResponseError
            from joblib import dump, load
            import dill
            import time
            import json
            from subprocess import run, Popen, PIPE
            from alibi_detect.utils.data import create_outlier_batch
            import swagger_client
            from swagger_client.rest import ApiException
            import yaml
            import json
            import urllib3
            urllib3.disable_warnings()
            '''

            block2 = '''
            def get_minio():
                return Minio(MINIO_HOST,
                                access_key=MINIO_ACCESS_KEY,
                                secret_key=MINIO_SECRET_KEY,
                                secure=False)
            '''

            block3 = '''
            def get_swagger_configuration():
                configuration = swagger_client.Configuration()
                configuration.host = 'http://seldon-deploy.seldon-system/seldon-deploy/api/v1alpha1'
                return configuration
            '''

            block4 = '''
            import requests

            from urllib.parse import urlparse

            KF_SESSION_COOKIE_NAME = "authservice_session"

            class SessionAuthenticator:
                """
                Returns the cookie token.
                """

                def __init__(self, server: str):
                    self._server = server

                    url = urlparse(server)
                    self._host = f"{url.scheme}://{url.netloc}"

                def authenticate(self, user: str, password: str) -> str:
                    auth_path = self._get_auth_path()
                    success_path = self._submit_auth(auth_path, user, password)
                    session_cookie = self._get_session_cookie(success_path)
                    return session_cookie

                def _get_auth_path(self) -> str:
                    # Send unauthenticated request
                    res = requests.get(self._server, allow_redirects=False, verify=False)

                    # Follow the 302 redirect
                    oidc_path = res.headers["Location"]
                    oidc_endpoint = f"{self._host}{oidc_path}"
                    res = requests.get(oidc_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _submit_auth(self, auth_path: str, user: str, password: str) -> str:
                    auth_endpoint = f"{self._host}{auth_path}"
                    auth_payload = {"login": user, "password": password}
                    res = requests.post(auth_endpoint, auth_payload, allow_redirects=False, verify=False)

                    login_path = res.headers["Location"]
                    login_endpoint = f"{self._host}{login_path}"
                    res = requests.get(login_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _get_session_cookie(self, success_path: str) -> str:
                    success_endpoint = f"{self._host}{success_path}"
                    res = requests.get(success_endpoint, allow_redirects=False, verify=False)
                    print(res.cookies)
                    return res.cookies[KF_SESSION_COOKIE_NAME]

            def authenticate():
                authenticator = SessionAuthenticator(DEPLOY_SERVER)

                cookie = authenticator.authenticate(DEPLOY_USER, DEPLOY_PASSWORD)
                return cookie
            '''

            block5 = '''
            minioClient = get_minio()
            buckets = minioClient.list_buckets()
            for bucket in buckets:
                print(bucket.name, bucket.creation_date)
            '''

            block6 = '''
            if not minioClient.bucket_exists(MINIO_MODEL_BUCKET):
                minioClient.make_bucket(MINIO_MODEL_BUCKET)
            '''

            # run the code blocks inside a jupyter kernel
            from kale.utils.jupyter_utils import run_code as _kale_run_code
            from kale.utils.kfp_utils import\
                update_uimetadata as _kale_update_uimetadata
            blocks = (pipeline_parameters_block,
                      block1,
                      block2,
                      block3,
                      block4,
                      block5,
                      block6,
                      )
            html_artifact = _kale_run_code(blocks)
            with open("/setup.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('setup')

            _kale_mlmd_utils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Setup', description='')
        _parser.add_argument("--DEPLOY-PASSWORD", dest="DEPLOY_PASSWORD", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-SERVER", dest="DEPLOY_SERVER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-USER", dest="DEPLOY_USER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-ACCESS-KEY", dest="MINIO_ACCESS_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-HOST", dest="MINIO_HOST", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-MODEL-BUCKET", dest="MINIO_MODEL_BUCKET", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-SECRET-KEY", dest="MINIO_SECRET_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = setup(**_parsed_args)

        _output_serializers = [

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      "image": |-
        seldonio/jupyter-lab-alibi-kale:0.23
      "securityContext":
        "runAsUser": !!int |-
          0
      "volumeMounts":
      - "mountPath": |-
          /marshal
        "name": |-
          kale-marshal-volume
      "workingDir": |-
        /home/jovyan
    "inputs":
      "parameters":
      - "name": |-
          DEPLOY_PASSWORD
      - "name": |-
          DEPLOY_SERVER
      - "name": |-
          DEPLOY_USER
      - "name": |-
          MINIO_ACCESS_KEY
      - "name": |-
          MINIO_HOST
      - "name": |-
          MINIO_MODEL_BUCKET
      - "name": |-
          MINIO_SECRET_KEY
      - "name": |-
          kale-marshal-volume-name
    "metadata":
      "annotations":
        "kubeflow-kale.org/dependent-templates": |-
          ["kale-marshal-volume"]
        "kubeflow-kale.org/volume-name-parameters": |-
          ["kale-marshal-volume-name"]
        "pipelines.kubeflow.org/component_spec": |-
          {"inputs": [{"name": "DEPLOY_PASSWORD", "type": "String"}, {"name": "DEPLOY_SERVER", "type": "String"}, {"name": "DEPLOY_USER", "type": "String"}, {"name": "MINIO_ACCESS_KEY", "type": "String"}, {"name": "MINIO_HOST", "type": "String"}, {"name": "MINIO_MODEL_BUCKET", "type": "String"}, {"name": "MINIO_SECRET_KEY", "type": "String"}], "name": "Setup"}
      "labels":
        "pipelines.kubeflow.org/metadata_written": |-
          true
    "name": |-
      setup
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          setup
        "path": |-
          /setup.html
    "volumes":
    - "name": |-
        kale-marshal-volume
      "persistentVolumeClaim":
        "claimName": |-
          {{inputs.parameters.kale-marshal-volume-name}}
  - "container":
      "args":
      - |-
        --DEPLOY-NAMESPACE
      - |-
        {{inputs.parameters.DEPLOY_NAMESPACE}}
      - |-
        --DEPLOY-PASSWORD
      - |-
        {{inputs.parameters.DEPLOY_PASSWORD}}
      - |-
        --DEPLOY-SERVER
      - |-
        {{inputs.parameters.DEPLOY_SERVER}}
      - |-
        --DEPLOY-USER
      - |-
        {{inputs.parameters.DEPLOY_USER}}
      - |-
        --MINIO-ACCESS-KEY
      - |-
        {{inputs.parameters.MINIO_ACCESS_KEY}}
      - |-
        --MINIO-HOST
      - |-
        {{inputs.parameters.MINIO_HOST}}
      - |-
        --MINIO-SECRET-KEY
      - |-
        {{inputs.parameters.MINIO_SECRET_KEY}}
      "command":
      - |-
        python3
      - |-
        -u
      - |-
        -c
      - |
        def test_outlier_detection(DEPLOY_NAMESPACE , DEPLOY_PASSWORD , DEPLOY_SERVER , DEPLOY_USER , MINIO_ACCESS_KEY , MINIO_HOST , MINIO_SECRET_KEY ):
            pipeline_parameters_block = '''
            DEPLOY_NAMESPACE = "{}"
            DEPLOY_PASSWORD = "{}"
            DEPLOY_SERVER = "{}"
            DEPLOY_USER = "{}"
            MINIO_ACCESS_KEY = "{}"
            MINIO_HOST = "{}"
            MINIO_SECRET_KEY = "{}"
            '''.format(DEPLOY_NAMESPACE, DEPLOY_PASSWORD, DEPLOY_SERVER, DEPLOY_USER, MINIO_ACCESS_KEY, MINIO_HOST, MINIO_SECRET_KEY)

            from kale.utils import mlmd_utils as _kale_mlmd_utils
            _kale_mlmd_utils.init_metadata()

            data_loading_block = '''
            # -----------------------DATA LOADING START--------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/marshal")
            _kale_marshal_utils.set_kale_directory_file_names()
            model_name = _kale_marshal_utils.load("model_name")
            namespace = _kale_marshal_utils.load("namespace")
            # -----------------------DATA LOADING END----------------------------------
            '''

            block1 = '''
            import numpy as np
            from sklearn.ensemble import RandomForestClassifier
            from sklearn.compose import ColumnTransformer
            from sklearn.pipeline import Pipeline
            from sklearn.impute import SimpleImputer
            from sklearn.metrics import accuracy_score
            from sklearn.preprocessing import StandardScaler, OneHotEncoder
            from alibi.explainers import AnchorTabular
            from alibi.datasets import fetch_adult
            from minio import Minio
            from minio.error import ResponseError
            from joblib import dump, load
            import dill
            import time
            import json
            from subprocess import run, Popen, PIPE
            from alibi_detect.utils.data import create_outlier_batch
            import swagger_client
            from swagger_client.rest import ApiException
            import yaml
            import json
            import urllib3
            urllib3.disable_warnings()
            '''

            block2 = '''
            def get_minio():
                return Minio(MINIO_HOST,
                                access_key=MINIO_ACCESS_KEY,
                                secret_key=MINIO_SECRET_KEY,
                                secure=False)
            '''

            block3 = '''
            def get_swagger_configuration():
                configuration = swagger_client.Configuration()
                configuration.host = 'http://seldon-deploy.seldon-system/seldon-deploy/api/v1alpha1'
                return configuration
            '''

            block4 = '''
            import requests

            from urllib.parse import urlparse

            KF_SESSION_COOKIE_NAME = "authservice_session"

            class SessionAuthenticator:
                """
                Returns the cookie token.
                """

                def __init__(self, server: str):
                    self._server = server

                    url = urlparse(server)
                    self._host = f"{url.scheme}://{url.netloc}"

                def authenticate(self, user: str, password: str) -> str:
                    auth_path = self._get_auth_path()
                    success_path = self._submit_auth(auth_path, user, password)
                    session_cookie = self._get_session_cookie(success_path)
                    return session_cookie

                def _get_auth_path(self) -> str:
                    # Send unauthenticated request
                    res = requests.get(self._server, allow_redirects=False, verify=False)

                    # Follow the 302 redirect
                    oidc_path = res.headers["Location"]
                    oidc_endpoint = f"{self._host}{oidc_path}"
                    res = requests.get(oidc_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _submit_auth(self, auth_path: str, user: str, password: str) -> str:
                    auth_endpoint = f"{self._host}{auth_path}"
                    auth_payload = {"login": user, "password": password}
                    res = requests.post(auth_endpoint, auth_payload, allow_redirects=False, verify=False)

                    login_path = res.headers["Location"]
                    login_endpoint = f"{self._host}{login_path}"
                    res = requests.get(login_endpoint, allow_redirects=False, verify=False)

                    return res.headers["Location"]

                def _get_session_cookie(self, success_path: str) -> str:
                    success_endpoint = f"{self._host}{success_path}"
                    res = requests.get(success_endpoint, allow_redirects=False, verify=False)
                    print(res.cookies)
                    return res.cookies[KF_SESSION_COOKIE_NAME]

            def authenticate():
                authenticator = SessionAuthenticator(DEPLOY_SERVER)

                cookie = authenticator.authenticate(DEPLOY_USER, DEPLOY_PASSWORD)
                return cookie
            '''

            block5 = '''
            def predict():
                configuration = get_swagger_configuration()
                cookie = authenticate()
                cookie_str = f"{KF_SESSION_COOKIE_NAME}={cookie}"
                predict_instance = swagger_client.PredictApi(swagger_client.ApiClient(configuration,cookie=cookie_str))
                prediction = predict_instance.predict_seldon_deployment(model_name,namespace, prediction={"data": {"ndarray": [[3000,4,4,2,1,4,4,0,0,0,600,9]]}})
                print(prediction)
            '''

            block6 = '''

            def get_outlier_event_display_logs():
                cmd=f"kubectl logs $(kubectl get pod -l app=hello-display -o jsonpath='{{.items[0].metadata.name}}' -n {DEPLOY_NAMESPACE}) -n {DEPLOY_NAMESPACE}"
                ret = Popen(cmd, shell=True,stdout=PIPE)
                res = ret.stdout.read().decode("utf-8").split("\\n")
                data= []
                for i in range(0,len(res)):
                    if res[i] == 'Data,':
                        j = json.loads(json.loads(res[i+1]))
                        print(j)
                        if "is_outlier"in j["data"].keys():
                            data.append(j)
                if len(data) > 0:
                    return data[-1]
                else:
                    return None
            j = None
            while j is None:
                predict()
                print("Waiting for outlier logs, sleeping")
                time.sleep(2)
                j = get_outlier_event_display_logs()

            print(j)
            print("Outlier",j["data"]["is_outlier"]==[1])
            '''

            block7 = '''

            '''

            # run the code blocks inside a jupyter kernel
            from kale.utils.jupyter_utils import run_code as _kale_run_code
            from kale.utils.kfp_utils import\
                update_uimetadata as _kale_update_uimetadata
            blocks = (pipeline_parameters_block, data_loading_block,
                      block1,
                      block2,
                      block3,
                      block4,
                      block5,
                      block6,
                      block7,
                      )
            html_artifact = _kale_run_code(blocks)
            with open("/test_outlier_detection.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('test_outlier_detection')

            _kale_mlmd_utils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Test outlier detection', description='')
        _parser.add_argument("--DEPLOY-NAMESPACE", dest="DEPLOY_NAMESPACE", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-PASSWORD", dest="DEPLOY_PASSWORD", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-SERVER", dest="DEPLOY_SERVER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--DEPLOY-USER", dest="DEPLOY_USER", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-ACCESS-KEY", dest="MINIO_ACCESS_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-HOST", dest="MINIO_HOST", type=str, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--MINIO-SECRET-KEY", dest="MINIO_SECRET_KEY", type=str, required=True, default=argparse.SUPPRESS)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = test_outlier_detection(**_parsed_args)

        _output_serializers = [

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      "image": |-
        seldonio/jupyter-lab-alibi-kale:0.23
      "securityContext":
        "runAsUser": !!int |-
          0
      "volumeMounts":
      - "mountPath": |-
          /marshal
        "name": |-
          kale-marshal-volume
      "workingDir": |-
        /home/jovyan
    "inputs":
      "parameters":
      - "name": |-
          DEPLOY_NAMESPACE
      - "name": |-
          DEPLOY_PASSWORD
      - "name": |-
          DEPLOY_SERVER
      - "name": |-
          DEPLOY_USER
      - "name": |-
          MINIO_ACCESS_KEY
      - "name": |-
          MINIO_HOST
      - "name": |-
          MINIO_SECRET_KEY
      - "name": |-
          kale-marshal-volume-name
    "metadata":
      "annotations":
        "kubeflow-kale.org/dependent-templates": |-
          ["Deploy event display", "kale-marshal-volume"]
        "kubeflow-kale.org/volume-name-parameters": |-
          ["kale-marshal-volume-name"]
        "pipelines.kubeflow.org/component_spec": |-
          {"inputs": [{"name": "DEPLOY_NAMESPACE", "type": "String"}, {"name": "DEPLOY_PASSWORD", "type": "String"}, {"name": "DEPLOY_SERVER", "type": "String"}, {"name": "DEPLOY_USER", "type": "String"}, {"name": "MINIO_ACCESS_KEY", "type": "String"}, {"name": "MINIO_HOST", "type": "String"}, {"name": "MINIO_SECRET_KEY", "type": "String"}], "name": "Test outlier detection"}
      "labels":
        "pipelines.kubeflow.org/metadata_written": |-
          true
    "name": |-
      test-outlier-detection
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          test_outlier_detection
        "path": |-
          /test_outlier_detection.html
    "volumes":
    - "name": |-
        kale-marshal-volume
      "persistentVolumeClaim":
        "claimName": |-
          {{inputs.parameters.kale-marshal-volume-name}}
  - "container":
      "args":
      - |-
        --DEPLOY-PASSWORD
      - |-
        {{inputs.parameters.DEPLOY_PASSWORD}}
      - |-
        --DEPLOY-SERVER
      - |-
        {{inputs.parameters.DEPLOY_SERVER}}
      - |-
        --DEPLOY-USER
      - |-
        {{inputs.parameters.DEPLOY_USER}}
      - |-
        --EXPLAINER-MODEL-PATH
      - |-
        {{inputs.parameters.EXPLAINER_MODEL_PATH}}
      - |-
        --MINIO-ACCESS-KEY
      - |-
        {{inputs.parameters.MINIO_ACCESS_KEY}}
      - |-
        --MINIO-HOST
      - |-
        {{inputs.parameters.MINIO_HOST}}
      - |-
        --MINIO-MODEL-BUCKET
      - |-
        {{inputs.parameters.MINIO_MODEL_BUCKET}}
      - |-
        --MINIO-SECRET-KEY
      - |-
        {{inputs.parameters.MINIO_SECRET_KEY}}
      "command":
      - |-
        python3
      - |-
        -u
      - |-
        -c
      - "def train_explainer(DEPLOY_PASSWORD , DEPLOY_SERVER , DEPLOY_USER , EXPLAINER_MODEL_PATH\
        \ , MINIO_ACCESS_KEY , MINIO_HOST , MINIO_MODEL_BUCKET , MINIO_SECRET_KEY\
        \ ):\n    pipeline_parameters_block = '''\n    DEPLOY_PASSWORD = \"{}\"\n\
        \    DEPLOY_SERVER = \"{}\"\n    DEPLOY_USER = \"{}\"\n    EXPLAINER_MODEL_PATH\
        \ = \"{}\"\n    MINIO_ACCESS_KEY = \"{}\"\n    MINIO_HOST = \"{}\"\n    MINIO_MODEL_BUCKET\
        \ = \"{}\"\n    MINIO_SECRET_KEY = \"{}\"\n    '''.format(DEPLOY_PASSWORD,\
        \ DEPLOY_SERVER, DEPLOY_USER, EXPLAINER_MODEL_PATH, MINIO_ACCESS_KEY, MINIO_HOST,\
        \ MINIO_MODEL_BUCKET, MINIO_SECRET_KEY)\n\n    from kale.utils import mlmd_utils\
        \ as _kale_mlmd_utils\n    _kale_mlmd_utils.init_metadata()\n\n    data_loading_block\
        \ = '''\n    # -----------------------DATA LOADING START--------------------------------\n\
        \    from kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"\
        /marshal\")\n    _kale_marshal_utils.set_kale_directory_file_names()\n   \
        \ X_train = _kale_marshal_utils.load(\"X_train\")\n    category_map = _kale_marshal_utils.load(\"\
        category_map\")\n    feature_names = _kale_marshal_utils.load(\"feature_names\"\
        )\n    model = _kale_marshal_utils.load(\"model\")\n    predict_fn = _kale_marshal_utils.load(\"\
        predict_fn\")\n    # -----------------------DATA LOADING END----------------------------------\n\
        \    '''\n\n    block1 = '''\n    import numpy as np\n    from sklearn.ensemble\
        \ import RandomForestClassifier\n    from sklearn.compose import ColumnTransformer\n\
        \    from sklearn.pipeline import Pipeline\n    from sklearn.impute import\
        \ SimpleImputer\n    from sklearn.metrics import accuracy_score\n    from\
        \ sklearn.preprocessing import StandardScaler, OneHotEncoder\n    from alibi.explainers\
        \ import AnchorTabular\n    from alibi.datasets import fetch_adult\n    from\
        \ minio import Minio\n    from minio.error import ResponseError\n    from\
        \ joblib import dump, load\n    import dill\n    import time\n    import json\n\
        \    from subprocess import run, Popen, PIPE\n    from alibi_detect.utils.data\
        \ import create_outlier_batch\n    import swagger_client\n    from swagger_client.rest\
        \ import ApiException\n    import yaml\n    import json\n    import urllib3\n\
        \    urllib3.disable_warnings()\n    '''\n\n    block2 = '''\n    def get_minio():\n\
        \        return Minio(MINIO_HOST,\n                        access_key=MINIO_ACCESS_KEY,\n\
        \                        secret_key=MINIO_SECRET_KEY,\n                  \
        \      secure=False)\n    '''\n\n    block3 = '''\n    def get_swagger_configuration():\n\
        \        configuration = swagger_client.Configuration()\n        configuration.host\
        \ = 'http://seldon-deploy.seldon-system/seldon-deploy/api/v1alpha1'\n    \
        \    return configuration\n    '''\n\n    block4 = '''\n    import requests\n\
        \n    from urllib.parse import urlparse\n\n    KF_SESSION_COOKIE_NAME = \"\
        authservice_session\"\n\n    class SessionAuthenticator:\n        \"\"\"\n\
        \        Returns the cookie token.\n        \"\"\"\n\n        def __init__(self,\
        \ server: str):\n            self._server = server\n\n            url = urlparse(server)\n\
        \            self._host = f\"{url.scheme}://{url.netloc}\"\n\n        def\
        \ authenticate(self, user: str, password: str) -> str:\n            auth_path\
        \ = self._get_auth_path()\n            success_path = self._submit_auth(auth_path,\
        \ user, password)\n            session_cookie = self._get_session_cookie(success_path)\n\
        \            return session_cookie\n\n        def _get_auth_path(self) ->\
        \ str:\n            # Send unauthenticated request\n            res = requests.get(self._server,\
        \ allow_redirects=False, verify=False)\n\n            # Follow the 302 redirect\n\
        \            oidc_path = res.headers[\"Location\"]\n            oidc_endpoint\
        \ = f\"{self._host}{oidc_path}\"\n            res = requests.get(oidc_endpoint,\
        \ allow_redirects=False, verify=False)\n\n            return res.headers[\"\
        Location\"]\n\n        def _submit_auth(self, auth_path: str, user: str, password:\
        \ str) -> str:\n            auth_endpoint = f\"{self._host}{auth_path}\"\n\
        \            auth_payload = {\"login\": user, \"password\": password}\n  \
        \          res = requests.post(auth_endpoint, auth_payload, allow_redirects=False,\
        \ verify=False)\n\n            login_path = res.headers[\"Location\"]\n  \
        \          login_endpoint = f\"{self._host}{login_path}\"\n            res\
        \ = requests.get(login_endpoint, allow_redirects=False, verify=False)\n\n\
        \            return res.headers[\"Location\"]\n\n        def _get_session_cookie(self,\
        \ success_path: str) -> str:\n            success_endpoint = f\"{self._host}{success_path}\"\
        \n            res = requests.get(success_endpoint, allow_redirects=False,\
        \ verify=False)\n            print(res.cookies)\n            return res.cookies[KF_SESSION_COOKIE_NAME]\n\
        \n    def authenticate():\n        authenticator = SessionAuthenticator(DEPLOY_SERVER)\n\
        \n        cookie = authenticator.authenticate(DEPLOY_USER, DEPLOY_PASSWORD)\n\
        \        return cookie\n    '''\n\n    block5 = '''\n    model.predict(X_train)\n\
        \    explainer = AnchorTabular(predict_fn, feature_names, categorical_names=category_map)\n\
        \    '''\n\n    block6 = '''\n    explainer.fit(X_train, disc_perc=[25, 50,\
        \ 75])\n    '''\n\n    block7 = '''\n    with open(\"explainer.dill\", \"\
        wb\") as dill_file:\n        dill.dump(explainer, dill_file)    \n       \
        \ dill_file.close()\n    print(get_minio().fput_object(MINIO_MODEL_BUCKET,\
        \ f\"{EXPLAINER_MODEL_PATH}/explainer.dill\", 'explainer.dill'))\n    '''\n\
        \n    data_saving_block = '''\n    # -----------------------DATA SAVING START---------------------------------\n\
        \    from kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"\
        /marshal\")\n    _kale_marshal_utils.save(X_train, \"X_train\")\n    _kale_marshal_utils.save(explainer,\
        \ \"explainer\")\n    _kale_marshal_utils.save(model, \"model\")\n    # -----------------------DATA\
        \ SAVING END-----------------------------------\n    '''\n\n    # run the\
        \ code blocks inside a jupyter kernel\n    from kale.utils.jupyter_utils import\
        \ run_code as _kale_run_code\n    from kale.utils.kfp_utils import\\\n   \
        \     update_uimetadata as _kale_update_uimetadata\n    blocks = (pipeline_parameters_block,\
        \ data_loading_block,\n              block1,\n              block2,\n    \
        \          block3,\n              block4,\n              block5,\n       \
        \       block6,\n              block7,\n              data_saving_block)\n\
        \    html_artifact = _kale_run_code(blocks)\n    with open(\"/train_explainer.html\"\
        , \"w\") as f:\n        f.write(html_artifact)\n    _kale_update_uimetadata('train_explainer')\n\
        \n    _kale_mlmd_utils.call(\"mark_execution_complete\")\n\nimport argparse\n\
        _parser = argparse.ArgumentParser(prog='Train explainer', description='')\n\
        _parser.add_argument(\"--DEPLOY-PASSWORD\", dest=\"DEPLOY_PASSWORD\", type=str,\
        \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--DEPLOY-SERVER\"\
        , dest=\"DEPLOY_SERVER\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--DEPLOY-USER\", dest=\"DEPLOY_USER\", type=str, required=True,\
        \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--EXPLAINER-MODEL-PATH\"\
        , dest=\"EXPLAINER_MODEL_PATH\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--MINIO-ACCESS-KEY\", dest=\"MINIO_ACCESS_KEY\", type=str,\
        \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--MINIO-HOST\"\
        , dest=\"MINIO_HOST\", type=str, required=True, default=argparse.SUPPRESS)\n\
        _parser.add_argument(\"--MINIO-MODEL-BUCKET\", dest=\"MINIO_MODEL_BUCKET\"\
        , type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
        --MINIO-SECRET-KEY\", dest=\"MINIO_SECRET_KEY\", type=str, required=True,\
        \ default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\
        _output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_explainer(**_parsed_args)\n\
        \n_output_serializers = [\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
        \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
        \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
      "image": |-
        seldonio/jupyter-lab-alibi-kale:0.23
      "securityContext":
        "runAsUser": !!int |-
          0
      "volumeMounts":
      - "mountPath": |-
          /marshal
        "name": |-
          kale-marshal-volume
      "workingDir": |-
        /home/jovyan
    "inputs":
      "parameters":
      - "name": |-
          DEPLOY_PASSWORD
      - "name": |-
          DEPLOY_SERVER
      - "name": |-
          DEPLOY_USER
      - "name": |-
          EXPLAINER_MODEL_PATH
      - "name": |-
          MINIO_ACCESS_KEY
      - "name": |-
          MINIO_HOST
      - "name": |-
          MINIO_MODEL_BUCKET
      - "name": |-
          MINIO_SECRET_KEY
      - "name": |-
          kale-marshal-volume-name
    "metadata":
      "annotations":
        "kubeflow-kale.org/dependent-templates": |-
          ["Build model", "kale-marshal-volume"]
        "kubeflow-kale.org/volume-name-parameters": |-
          ["kale-marshal-volume-name"]
        "pipelines.kubeflow.org/component_spec": |-
          {"inputs": [{"name": "DEPLOY_PASSWORD", "type": "String"}, {"name": "DEPLOY_SERVER", "type": "String"}, {"name": "DEPLOY_USER", "type": "String"}, {"name": "EXPLAINER_MODEL_PATH", "type": "String"}, {"name": "MINIO_ACCESS_KEY", "type": "String"}, {"name": "MINIO_HOST", "type": "String"}, {"name": "MINIO_MODEL_BUCKET", "type": "String"}, {"name": "MINIO_SECRET_KEY", "type": "String"}], "name": "Train explainer"}
      "labels":
        "pipelines.kubeflow.org/metadata_written": |-
          true
    "name": |-
      train-explainer
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          train_explainer
        "path": |-
          /train_explainer.html
    "volumes":
    - "name": |-
        kale-marshal-volume
      "persistentVolumeClaim":
        "claimName": |-
          {{inputs.parameters.kale-marshal-volume-name}}
